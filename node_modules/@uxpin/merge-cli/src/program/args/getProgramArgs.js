"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProgramArgs = exports.DEFAULT_CONFIG_PATH = void 0;
const Command_1 = require("../command/Command");
const pickConfigArgs_1 = require("./pickConfigArgs");
const getConfigPath_1 = require("./providers/paths/getConfigPath");
exports.DEFAULT_CONFIG_PATH = './uxpin.config.js';
const DEFAULT_UXPIN_DOMAIN = 'uxpin.com';
const defaultArgs = {
    [Command_1.Command.GENERATE_PRESETS]: {
        command: Command_1.Command.GENERATE_PRESETS,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
    },
    [Command_1.Command.DUMP]: {
        command: Command_1.Command.DUMP,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
    },
    [Command_1.Command.EXPERIMENT]: {
        command: Command_1.Command.EXPERIMENT,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
        disableTunneling: false,
        port: 8877,
        skipBrowser: false,
        uxpinDomain: DEFAULT_UXPIN_DOMAIN,
    },
    [Command_1.Command.INIT]: {
        command: Command_1.Command.INIT,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
    },
    [Command_1.Command.PUSH]: {
        command: Command_1.Command.PUSH,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
        token: process.env.UXPIN_AUTH_TOKEN,
        uxpinDomain: DEFAULT_UXPIN_DOMAIN,
    },
    [Command_1.Command.SERVER]: {
        command: Command_1.Command.SERVER,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
        port: 8080,
    },
    [Command_1.Command.SUMMARY]: {
        command: Command_1.Command.SUMMARY,
        config: exports.DEFAULT_CONFIG_PATH,
        cwd: process.cwd(),
    },
};
function getProgramArgs(program) {
    const command = getCommand(program);
    const cliArgs = getCLIArgs(program, command);
    const configArgs = pickConfigArgs_1.pickConfigArgs(getConfigPath_1.getConfigPath(Object.assign(Object.assign({}, defaultArgs[command]), cliArgs)), command);
    return Object.assign(Object.assign(Object.assign({}, defaultArgs[command]), configArgs), cliArgs);
}
exports.getProgramArgs = getProgramArgs;
function getCommand(program) {
    const args = program.args || [];
    return args.filter(isArgKnownCommand(Object.keys(defaultArgs)))
        .reduce((command, arg) => arg.name(), Command_1.DEFAULT_COMMAND);
}
function getCLIArgs(program, command) {
    return Object.assign(Object.assign({}, program), getCommandArgs(program, command));
}
function getCommandArgs(program, command) {
    const commanderStatic = (program.args || [])
        .find(isArgKnownCommand([command]));
    if (!commanderStatic) {
        return {};
    }
    return Object.assign({}, commanderStatic);
}
function isArgKnownCommand(knownCommands) {
    return (arg) => typeof arg !== 'string' && knownCommands.includes(arg.name());
}
//# sourceMappingURL=getProgramArgs.js.map