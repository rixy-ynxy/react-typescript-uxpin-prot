"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.LIBRARY_OUTPUT_FILENAME = exports.LIBRARY_INPUT_FILENAME = exports.TEMP_DIR_PATH = exports.TEMP_DIR_NAME = exports.DEBUG_APP_BUNDLED_FILE = void 0;
const path_1 = require("path");
const webpack_merge_1 = require("webpack-merge");
const getComponentLibraryInputPath_1 = require("../library/getComponentLibraryInputPath");
exports.DEBUG_APP_BUNDLED_FILE = 'index.js';
exports.TEMP_DIR_NAME = '.uxpin-merge';
exports.TEMP_DIR_PATH = `./${exports.TEMP_DIR_NAME}`;
exports.LIBRARY_INPUT_FILENAME = `components.js`;
exports.LIBRARY_OUTPUT_FILENAME = 'designsystemlibrary.js';
function getConfig({ development, webpackConfigPath, projectRoot, uxpinDirPath }) {
    const config = decorateWithDevToolsWhenDevelopment({
        entry: getComponentLibraryInputPath_1.getComponentLibraryInputPath(uxpinDirPath),
        mode: development ? 'development' : 'production',
        optimization: {
            runtimeChunk: false,
            splitChunks: false,
        },
        output: {
            filename: exports.LIBRARY_OUTPUT_FILENAME,
            libraryTarget: 'commonjs',
            path: uxpinDirPath,
        },
        resolve: {
            extensions: ['.js', '.jsx'],
        },
    }, development);
    if (webpackConfigPath) {
        const userWebpackConfig = require(path_1.join(projectRoot, webpackConfigPath));
        return webpack_merge_1.smart(userWebpackConfig, config);
    }
    return config;
}
exports.getConfig = getConfig;
function decorateWithDevToolsWhenDevelopment(config, development = false) {
    if (!development) {
        return config;
    }
    return Object.assign(Object.assign({}, config), { devtool: 'cheap-module-eval-source-map' });
}
//# sourceMappingURL=getConfig.js.map