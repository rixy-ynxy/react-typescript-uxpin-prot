"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const getConfig_1 = require("../getConfig");
describe('getConfig', () => {
    const projectRoot = path_1.resolve(__dirname, '../../../../../test/resources/configs/');
    const entryPath = path_1.join(projectRoot, getConfig_1.TEMP_DIR_NAME, getConfig_1.LIBRARY_INPUT_FILENAME);
    describe('when webpack config is defined', () => {
        const webpackConfigPath = './getconfig-webpack.config.js';
        let rules;
        beforeEach(() => {
            rules = [
                {
                    test: expect.any(Function),
                    use: [
                        { loader: '@shopify/images/icon-loader' },
                        { loader: 'image-webpack-loader' },
                    ],
                },
                {
                    test: expect.any(Function),
                    use: [{
                            loader: 'url-loader',
                            options: {
                                emitFile: true,
                                limit: 10000,
                            },
                        }],
                },
            ];
        });
        describe('and is development mode', () => {
            it('returns merged configuration from specific file with \'cheap-module-eval-source-map\ devtool ' +
                'and with development mod', () => {
                // given
                const expectedConfig = {
                    devtool: 'cheap-module-eval-source-map',
                    entry: entryPath,
                    mode: 'development',
                    module: { rules },
                    optimization: {
                        runtimeChunk: false,
                        splitChunks: false,
                    },
                    output: {
                        filename: getConfig_1.LIBRARY_OUTPUT_FILENAME,
                        libraryTarget: 'commonjs',
                        path: path_1.resolve(projectRoot, `./${getConfig_1.TEMP_DIR_NAME}`),
                        publicPath: '/assets/',
                    },
                    plugins: [],
                    resolve: {
                        alias: {
                            '@shopify/polaris': path_1.resolve(projectRoot, '..', 'src'),
                        },
                        extensions: ['.ts', '.tsx', '.js', '.json', '.js', '.jsx'],
                    },
                    target: 'web',
                };
                const options = {
                    development: true,
                    projectRoot,
                    uxpinDirPath: `${projectRoot}/${getConfig_1.TEMP_DIR_NAME}`,
                    webpackConfigPath,
                };
                // when
                const config = getConfig_1.getConfig(options);
                // then
                expect(config).toEqual(expectedConfig);
            });
        });
        describe('and is not development mode', () => {
            it('returns merged configuration from specific file without changed devtools rule ' +
                'and with production mode', () => {
                // given
                const expectedConfig = {
                    devtool: 'eval',
                    entry: entryPath,
                    mode: 'production',
                    module: { rules },
                    optimization: {
                        runtimeChunk: false,
                        splitChunks: false,
                    },
                    output: {
                        filename: getConfig_1.LIBRARY_OUTPUT_FILENAME,
                        libraryTarget: 'commonjs',
                        path: path_1.resolve(projectRoot, `./${getConfig_1.TEMP_DIR_NAME}`),
                        publicPath: '/assets/',
                    },
                    plugins: [],
                    resolve: {
                        alias: {
                            '@shopify/polaris': path_1.resolve(projectRoot, '..', 'src'),
                        },
                        extensions: ['.ts', '.tsx', '.js', '.json', '.js', '.jsx'],
                    },
                    target: 'web',
                };
                const options = {
                    development: false,
                    projectRoot,
                    uxpinDirPath: `${projectRoot}/${getConfig_1.TEMP_DIR_NAME}`,
                    webpackConfigPath,
                };
                // when
                const config = getConfig_1.getConfig(options);
                // then
                expect(config).toEqual(expectedConfig);
            });
        });
    });
    describe('when webpack config is not defined', () => {
        describe('and is development mode', () => {
            it('returns defined configuration with \'cheap-module-eval-source-map\' devtool and development mode', () => {
                // given
                const expectedConfig = {
                    devtool: 'cheap-module-eval-source-map',
                    entry: entryPath,
                    mode: 'development',
                    optimization: {
                        runtimeChunk: false,
                        splitChunks: false,
                    },
                    output: {
                        filename: getConfig_1.LIBRARY_OUTPUT_FILENAME,
                        libraryTarget: 'commonjs',
                        path: path_1.resolve(projectRoot, `./${getConfig_1.TEMP_DIR_NAME}`),
                    },
                    resolve: {
                        extensions: ['.js', '.jsx'],
                    },
                };
                const options = {
                    development: true,
                    projectRoot,
                    uxpinDirPath: `${projectRoot}/${getConfig_1.TEMP_DIR_NAME}`,
                };
                // when
                const config = getConfig_1.getConfig(options);
                // then
                expect(config).toEqual(expectedConfig);
            });
        });
        describe('and is not development mode', () => {
            it('returns defined configuration with production mode and without devtool parameter', () => {
                // given
                const expectedConfig = {
                    entry: entryPath,
                    mode: 'production',
                    optimization: {
                        runtimeChunk: false,
                        splitChunks: false,
                    },
                    output: {
                        filename: getConfig_1.LIBRARY_OUTPUT_FILENAME,
                        libraryTarget: 'commonjs',
                        path: path_1.resolve(projectRoot, `./${getConfig_1.TEMP_DIR_NAME}`),
                    },
                    resolve: {
                        extensions: ['.js', '.jsx'],
                    },
                };
                const options = {
                    development: false,
                    projectRoot,
                    uxpinDirPath: `${projectRoot}/${getConfig_1.TEMP_DIR_NAME}`,
                };
                // when
                const config = getConfig_1.getConfig(options);
                // then
                expect(config).toEqual(expectedConfig);
            });
        });
    });
});
//# sourceMappingURL=getConfig.test.js.map