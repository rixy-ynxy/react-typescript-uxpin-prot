"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLibraryBundleSource = void 0;
const path_1 = require("path");
const getConfig_1 = require("../config/getConfig");
const CLASS_NAME_WRAPPER = 'Wrapper';
function getLibraryBundleSource(components, wrapperPath) {
    const libImports = [
        'import * as React from \'react\';',
        'import * as ReactDOM from \'react-dom\';',
    ];
    const imports = components
        .filter((comp) => !comp.namespace)
        .map((comp) => `import ${getImportName(comp)} from '${getImportPath(comp)}';`);
    const wrapperImport = getWrapperImport(wrapperPath);
    const namespacedComponentDeclarations = getNamespacedComponentDeclarations(components);
    const exports = [
        `export {`,
        ...components.map((component) => `  ${getExportName(component)},`),
        ...(wrapperPath ? [`  ${CLASS_NAME_WRAPPER},`] : []),
        '  React,',
        '  ReactDOM,',
        `};`,
    ];
    return [
        ...libImports,
        ...imports,
        ...wrapperImport,
        ...namespacedComponentDeclarations,
        ...exports,
    ].join('\n');
}
exports.getLibraryBundleSource = getLibraryBundleSource;
function getImportName({ name, namespace, defaultExported }) {
    const componentName = namespace ? namespace.importSlug : name;
    if (defaultExported) {
        return componentName;
    }
    return `{ ${componentName} }`;
}
function getExportName({ name, namespace }) {
    return namespace ? namespace.importSlug : name;
}
function getImportPath({ info }) {
    const path = path_1.relative(getConfig_1.TEMP_DIR_PATH, `./${info.dirPath}`);
    const fileName = path_1.parse(info.implementation.path).name;
    return `${path}/${fileName}`;
}
function getWrapperImport(wrapperPath) {
    if (!wrapperPath) {
        return [];
    }
    return [`import ${CLASS_NAME_WRAPPER} from '${path_1.relative(getConfig_1.TEMP_DIR_PATH, wrapperPath)}';`];
}
function getNamespacedComponentDeclarations(components) {
    return components
        .filter((comp) => comp.namespace)
        .map(getNamespacedComponentDeclaration);
}
function getNamespacedComponentDeclaration(component) {
    const { name, namespace } = component;
    if (!namespace) {
        throw new Error('Namespace not found!');
    }
    return `const ${namespace.importSlug} = ${namespace.name}.${name};`;
}
//# sourceMappingURL=getLibraryBundleSource.js.map