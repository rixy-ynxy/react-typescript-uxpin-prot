"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNewPageContent = void 0;
const getRandomString_1 = require("../../../../../../utils/getRandomString");
const getAllComponentsFromCategories_1 = require("../../../../../serialization/component/categories/getAllComponentsFromCategories");
const getComponentId_1 = require("../data/codeSync/component/getComponentId");
const getDesignSystemId_1 = require("../data/codeSync/getDesignSystemId");
const getPresetId_1 = require("../data/codeSync/preset/getPresetId");
// tslint:disable-next-line:no-var-requires
const INTRO_COMPONENTS_COUNT = 3;
const ELEMENT_ID_LENGTH = 32;
const ELEMENT_PLACEMENT_OFFSET = 200;
const ELEMENT_PLACEMENT_DISTANCE = 500;
const ELEMENT_Y = 50;
function createNewPageContent({ revisionId }, metadata) {
    const introPageContent = require('./introPageContent.json');
    const introComponents = findIntroComponents(metadata);
    const designSystemId = getDesignSystemId_1.getDesignSystemId(revisionId);
    return introComponents.reduce((result, component, index) => {
        const componentId = getComponentId_1.getComponentId(designSystemId, component.info);
        const elementId = getRandomString_1.getRandomString(ELEMENT_ID_LENGTH);
        return Object.assign(Object.assign({}, result), { [elementId]: {
                props: {
                    codeComponentId: componentId,
                    codeComponentPresetId: getComponentPresetId(designSystemId, component),
                    framework: 'react',
                    revisionId,
                    x: index * ELEMENT_PLACEMENT_DISTANCE + ELEMENT_PLACEMENT_OFFSET,
                    y: ELEMENT_Y,
                },
                type: 'CodeComponent',
            }, canvas: Object.assign(Object.assign({}, result.canvas), { props: Object.assign(Object.assign({}, result.canvas.props), { storedElements: [
                        ...result.canvas.props.storedElements,
                        elementId,
                    ] }) }) });
    }, introPageContent);
}
exports.createNewPageContent = createNewPageContent;
function getComponentPresetId(designSystemId, component) {
    if (!component.info.presets || !component.info.presets[0]) {
        return undefined;
    }
    return getPresetId_1.getPresetId(designSystemId, component.info.presets[0].path);
}
function findIntroComponents(metadata) {
    return getAllComponentsFromCategories_1.getAllComponentsFromCategories(metadata.categorizedComponents).slice(0, INTRO_COMPONENTS_COUNT);
}
//# sourceMappingURL=createNewPageContent.js.map