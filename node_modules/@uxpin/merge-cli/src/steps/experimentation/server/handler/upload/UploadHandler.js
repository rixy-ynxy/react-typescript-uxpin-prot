"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadHandler = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const http_status_codes_1 = require("http-status-codes");
const path_1 = require("path");
const parseMultipartFormData_1 = require("../../common/form/parseMultipartFormData");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const handleImplementationError_1 = require("../error/handleImplementationError");
const PrepareUploadHandler_1 = require("./PrepareUploadHandler");
class UploadHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        this.handleFileUpload(request, response).catch((error) => handleImplementationError_1.handleImplementationError(response, error));
    }
    handleFileUpload(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.handleMultipartFormData(request);
            response.writeHead(http_status_codes_1.OK, Object.assign({ 'Content-Type': 'application/json' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)));
            response.write('{}');
            response.end();
        });
    }
    handleMultipartFormData(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { fields, files } = yield parseMultipartFormData_1.parseMultipartFormData(request);
            yield fs_extra_1.rename(files.file.path, this.getTargetFilePath(fields.path));
        });
    }
    getTargetFilePath(pathParam) {
        return path_1.join(this.context.uxpinDirPath, PrepareUploadHandler_1.UPLOAD_DIR_NAME, pathParam);
    }
}
exports.UploadHandler = UploadHandler;
//# sourceMappingURL=UploadHandler.js.map