"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetActivePageHandler = void 0;
const tslib_1 = require("tslib");
const http_status_codes_1 = require("http-status-codes");
const getPageData_1 = require("../../../common/page/data/getPageData");
const getAccessControlHeaders_1 = require("../../../headers/getAccessControlHeaders");
const handleImplementationError_1 = require("../../error/handleImplementationError");
class SetActivePageHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        this.respondWithPageContent(response, request.headers).catch((error) => handleImplementationError_1.handleImplementationError(response, error));
    }
    respondWithPageContent(response, headers) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const body = JSON.stringify(yield this.getPageData());
            response.writeHead(http_status_codes_1.OK, Object.assign({ 'Content-Type': 'text/xml; charset=utf-8' }, getAccessControlHeaders_1.getAccessControlHeaders(headers)));
            response.write(body);
            response.end();
        });
    }
    getPageData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { epid, ngrokSessionId, port, uxpinDirPath } = this.context;
            return yield getPageData_1.getPageData({ ngrokSessionId, port, revisionId: epid.revisionId, uxpinDirPath });
        });
    }
}
exports.SetActivePageHandler = SetActivePageHandler;
//# sourceMappingURL=SetActivePageHandler.js.map