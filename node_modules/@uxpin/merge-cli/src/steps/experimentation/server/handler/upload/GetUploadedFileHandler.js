"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUploadedFileHandler = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const http_status_codes_1 = require("http-status-codes");
const path_1 = require("path");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const handleImplementationError_1 = require("../error/handleImplementationError");
const getUploadMetadataPath_1 = require("./getUploadMetadataPath");
const PrepareUploadHandler_1 = require("./PrepareUploadHandler");
class GetUploadedFileHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response, uriParams) {
        this.handleGetUploadedFile(request, response, uriParams).catch((error) => {
            handleImplementationError_1.handleImplementationError(response, error);
        });
    }
    handleGetUploadedFile(request, response, [fileId]) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const uploadMetadata = yield this.getUploadFileMetadata(fileId);
            const filePath = this.getUploadedFilePath(fileId, uploadMetadata.fileName);
            const fileBuffer = yield fs_extra_1.readFile(filePath);
            response.writeHead(http_status_codes_1.OK, Object.assign({ 'Content-Type': uploadMetadata.contentType }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)));
            response.end(fileBuffer);
        });
    }
    getUploadedFilePath(fileId, fileName) {
        return path_1.join(this.context.uxpinDirPath, PrepareUploadHandler_1.UPLOAD_DIR_NAME, fileId, fileName);
    }
    getUploadFileMetadata(fileId) {
        return fs_extra_1.readJson(getUploadMetadataPath_1.getUploadMetadataPath(this.context.uxpinDirPath, fileId));
    }
}
exports.GetUploadedFileHandler = GetUploadedFileHandler;
//# sourceMappingURL=GetUploadedFileHandler.js.map