"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPreviewAllDataHandler = void 0;
const tslib_1 = require("tslib");
const http_status_codes_1 = require("http-status-codes");
const breakpoints_1 = require("../../common/breakpoints/breakpoints");
const getPageData_1 = require("../../common/page/data/getPageData");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const getNoCacheHeaders_1 = require("../../headers/getNoCacheHeaders");
const handleImplementationError_1 = require("../error/handleImplementationError");
class GetPreviewAllDataHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.respondWithPreviewAllData(request, response).catch((err) => handleImplementationError_1.handleImplementationError(response, err));
        });
    }
    respondWithPreviewAllData(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const body = JSON.stringify(yield this.getPreviewAllData());
            response.writeHead(http_status_codes_1.OK, Object.assign(Object.assign({ 'Content-Type': 'application/json' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)), getNoCacheHeaders_1.getNoCacheHeaders()));
            response.write(body);
            response.end();
        });
    }
    getPreviewAllData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pageData = yield this.getPageData();
            const breakpointId = 0;
            const pageId = 1;
            const width = breakpoints_1.breakpoints[breakpointId].width;
            const height = breakpoints_1.breakpoints[breakpointId].height;
            return {
                breakpoints: breakpoints_1.breakpoints,
                pageId,
                pages: [{
                        documentationExists: false,
                        id_page: pageId,
                        is_active: true,
                        main_version: breakpointId,
                        name: 'Experiment',
                        parent: null,
                        sort_order: 0,
                        version_of: null,
                        version_type: breakpointId,
                    }],
                pagesData: {
                    [pageId]: {
                        canvasData: pageData,
                        metaData: {
                            content: `/api/projects/${this.context.epid.revisionId}/pages/${pageId}/content`,
                            size: { width, height, scrollx: false, scrolly: false },
                        },
                    },
                },
                redirect: false,
            };
        });
    }
    getPageData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { epid, ngrokSessionId, port, uxpinDirPath } = this.context;
            return yield getPageData_1.getPageData({ ngrokSessionId, port, revisionId: epid.revisionId, uxpinDirPath });
        });
    }
}
exports.GetPreviewAllDataHandler = GetPreviewAllDataHandler;
//# sourceMappingURL=GetPreviewAllDataHandler.js.map