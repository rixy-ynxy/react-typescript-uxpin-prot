"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepareUploadHandler = exports.UPLOAD_METADATA_FILE_NAME = exports.UPLOAD_DIR_NAME = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const http_status_codes_1 = require("http-status-codes");
const path_1 = require("path");
const prepareDataFromPayload_1 = require("../../common/payload/prepareDataFromPayload");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const handleImplementationError_1 = require("../error/handleImplementationError");
const getUploadMetadataPath_1 = require("./getUploadMetadataPath");
exports.UPLOAD_DIR_NAME = 'user-upload';
exports.UPLOAD_METADATA_FILE_NAME = 'upload-metadata.json';
class PrepareUploadHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        this.handlePrepareUpload(request, response).catch((error) => handleImplementationError_1.handleImplementationError(response, error));
    }
    handlePrepareUpload(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const requestPayload = yield prepareDataFromPayload_1.prepareDataFromPayload(request);
            const fileId = yield this.createFileId();
            yield this.writeMetadata(fileId, requestPayload);
            const responseBody = JSON.stringify(yield this.getResponseData(fileId, requestPayload));
            response.writeHead(http_status_codes_1.OK, Object.assign({ 'Content-Type': 'text/xml; charset=utf-8' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)));
            response.end(responseBody);
        });
    }
    getResponseData(fileId, uploadDetails) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const parsedName = path_1.parse(uploadDetails.file_name);
            return {
                file_data: {
                    extension: parsedName.ext.split('.')[1],
                    id_stored_file: fileId,
                    id_tree: '1',
                    name: parsedName.name,
                    original_name: uploadDetails.file_name,
                    path: `${fileId}/`,
                    resolution: uploadDetails.resolution,
                    size: uploadDetails.file_size,
                    type: uploadDetails.file_type,
                },
                final_url: this.getFinalFileUrl(fileId, uploadDetails.file_name),
                id_stored_file: fileId,
                message: '',
                params: {
                    path: `${fileId}/${uploadDetails.file_name}`,
                },
                status: true,
                upload_url: this.getUploadUrl(),
            };
        });
    }
    getFinalFileUrl(fileId, fileName) {
        const { port } = this.context;
        return `http://localhost:${port}/upload/${fileId}/${fileName}`;
    }
    getUploadUrl() {
        const { port } = this.context;
        return `http://localhost:${port}/upload`;
    }
    createFileId() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const uploadDirPath = path_1.join(this.context.uxpinDirPath, exports.UPLOAD_DIR_NAME);
            yield fs_extra_1.ensureDir(uploadDirPath);
            const dirContents = yield fs_extra_1.readdir(uploadDirPath);
            const dirContentsAsNumbers = dirContents.map((n) => parseInt(n, 10));
            const newId = (Math.max(0, ...dirContentsAsNumbers) + 1).toString();
            yield fs_extra_1.mkdir(path_1.join(uploadDirPath, newId));
            return newId;
        });
    }
    writeMetadata(fileId, uploadDetails) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = {
                contentType: uploadDetails.file_type,
                fileName: uploadDetails.file_name,
            };
            const metadataPath = getUploadMetadataPath_1.getUploadMetadataPath(this.context.uxpinDirPath, fileId);
            yield fs_extra_1.writeJson(metadataPath, metadata);
        });
    }
}
exports.PrepareUploadHandler = PrepareUploadHandler;
//# sourceMappingURL=PrepareUploadHandler.js.map