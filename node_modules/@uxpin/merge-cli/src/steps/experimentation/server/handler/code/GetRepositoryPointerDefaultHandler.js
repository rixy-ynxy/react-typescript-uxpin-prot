"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRepositoryPointerDefaultHandler = void 0;
const http_status_codes_1 = require("http-status-codes");
const constants_1 = require("../../../../../common/constants");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const getNoCacheHeaders_1 = require("../../headers/getNoCacheHeaders");
const DEFAULT_REPO_POINTER_METADATA = {
    name: constants_1.DEFAULT_BRANCH_NAME,
    type: "branch" /* Branch */,
};
/**
 * Handle requests for the repositoryPointer/default
 * which normally returns the default pointerName to use
 *
 * In non-experimental mode this will return the project metadata that the server was started with
 *
 */
// tslint:disable prefer-function-over-method
class GetRepositoryPointerDefaultHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        // Always return the current: Get the default commit
        const pointer = Object.assign({}, DEFAULT_REPO_POINTER_METADATA);
        if (this.context.projectMetadata && this.context.projectMetadata.vcs) {
            pointer.name = this.context.projectMetadata.vcs.branchName;
        }
        response.writeHead(http_status_codes_1.OK, Object.assign(Object.assign({ 'Content-Type': 'application/json' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)), getNoCacheHeaders_1.getNoCacheHeaders()));
        response.write(JSON.stringify(pointer));
        response.end();
    }
}
exports.GetRepositoryPointerDefaultHandler = GetRepositoryPointerDefaultHandler;
//# sourceMappingURL=GetRepositoryPointerDefaultHandler.js.map