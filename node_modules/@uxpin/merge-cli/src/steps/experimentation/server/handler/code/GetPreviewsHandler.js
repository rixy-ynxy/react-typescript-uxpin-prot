"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPreviewsHandler = exports.PREVIEW_ITEM_TYPE = void 0;
const tslib_1 = require("tslib");
const http_status_codes_1 = require("http-status-codes");
const lodash_1 = require("lodash");
const getComponentNamespacedName_1 = require("../../../../serialization/component/name/getComponentNamespacedName");
const getProjectMetadata_1 = require("../../../metadata/getProjectMetadata");
const getComponentId_1 = require("../../common/page/data/codeSync/component/getComponentId");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const getNoCacheHeaders_1 = require("../../headers/getNoCacheHeaders");
const GetLibrariesHandler_1 = require("../libraries/GetLibrariesHandler");
exports.PREVIEW_ITEM_TYPE = 'code-sync-component';
class GetPreviewsHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            response.writeHead(http_status_codes_1.OK, Object.assign(Object.assign({ 'Content-type': 'application/json' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)), getNoCacheHeaders_1.getNoCacheHeaders()));
            response.write(yield this.getPreviewResponse());
            response.end();
        });
    }
    getPreviewResponse() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = yield this.getMetadata();
            const [designSystemId] = this.context.epid.revisionId.split('_');
            const response = lodash_1.flatMap(metadata.categorizedComponents, (category, index) => {
                const idCategory = index + 1;
                return category.components.map((component) => ({
                    id: getComponentId_1.getComponentId(designSystemId, component.info),
                    idCategory,
                    idLibrary: GetLibrariesHandler_1.EXPERIMENTAL_LIBRARY_ID,
                    name: getComponentNamespacedName_1.getComponentNamespacedName(component),
                    revisionId: this.context.epid.revisionId,
                    type: exports.PREVIEW_ITEM_TYPE,
                }));
            });
            return JSON.stringify(response);
        });
    }
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return getProjectMetadata_1.getProjectMetadata(this.context.uxpinDirPath);
        });
    }
}
exports.GetPreviewsHandler = GetPreviewsHandler;
//# sourceMappingURL=GetPreviewsHandler.js.map