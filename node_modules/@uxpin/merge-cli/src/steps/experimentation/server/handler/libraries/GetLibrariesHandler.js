"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLibrariesHandler = exports.LIBRARY_DEFAULT_NAME = exports.EXPERIMENTAL_LIBRARY_ID = void 0;
const tslib_1 = require("tslib");
const http_status_codes_1 = require("http-status-codes");
const getProjectMetadata_1 = require("../../../metadata/getProjectMetadata");
const getAccessControlHeaders_1 = require("../../headers/getAccessControlHeaders");
const getNoCacheHeaders_1 = require("../../headers/getNoCacheHeaders");
exports.EXPERIMENTAL_LIBRARY_ID = -1;
exports.LIBRARY_DEFAULT_NAME = 'Library from Code';
class GetLibrariesHandler {
    constructor(context) {
        this.context = context;
    }
    handle(request, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            response.writeHead(http_status_codes_1.OK, Object.assign(Object.assign({ 'Content-Type': 'application/json' }, getAccessControlHeaders_1.getAccessControlHeaders(request.headers)), getNoCacheHeaders_1.getNoCacheHeaders()));
            response.write(yield this.getLibrariesContent());
            response.end();
        });
    }
    getLibrariesContent() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = yield this.getMetadata();
            return JSON.stringify([
                {
                    _links: {
                        categories: {
                            href: '/code/categories',
                            templated: false,
                        },
                        info: {
                            href: '/code/info',
                            templated: false,
                        },
                        items: {
                            href: '/code/previews',
                            templated: false,
                        },
                        pointer: {
                            href: '/code/repositoryPointer',
                            templated: false,
                        },
                    },
                    accessScope: {
                        scopeGroup: 'account',
                        selectedUsers: [],
                    },
                    editScope: {
                        scopeGroup: 'account',
                        selectedUsers: [],
                    },
                    hasDesignSystem: false,
                    hash: this.context.epid.revisionId,
                    id: exports.EXPERIMENTAL_LIBRARY_ID,
                    idAccount: -1,
                    idClient: null,
                    idUser: -1,
                    insertDate: new Date(),
                    lastSketchSyncDate: null,
                    name: metadata.name || exports.LIBRARY_DEFAULT_NAME,
                    type: 'code-sync',
                },
            ]);
        });
    }
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return getProjectMetadata_1.getProjectMetadata(this.context.uxpinDirPath);
        });
    }
}
exports.GetLibrariesHandler = GetLibrariesHandler;
//# sourceMappingURL=GetLibrariesHandler.js.map