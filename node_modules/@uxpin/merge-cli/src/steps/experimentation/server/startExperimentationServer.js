"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startExperimentationServer = void 0;
const tslib_1 = require("tslib");
const http_1 = require("http");
const getAPPExperimentationRemoteURL_1 = require("../app/getAPPExperimentationRemoteURL");
const printServerReadyMessage_1 = require("./console/printServerReadyMessage");
const createLibraryBundleHandler_1 = require("./handler/bundle/createLibraryBundleHandler");
const GetCategoriesHandler_1 = require("./handler/code/GetCategoriesHandler");
const GetInfoHandler_1 = require("./handler/code/GetInfoHandler");
const GetPreviewsHandler_1 = require("./handler/code/GetPreviewsHandler");
const GetRepositoryPointerDefaultHandler_1 = require("./handler/code/GetRepositoryPointerDefaultHandler");
const GetRepositoryPointerHandler_1 = require("./handler/code/GetRepositoryPointerHandler");
const GetVariablesHandler_1 = require("./handler/document/GetVariablesHandler");
const GetLibrariesHandler_1 = require("./handler/libraries/GetLibrariesHandler");
const GetLibrariesIndexHandler_1 = require("./handler/libraries/GetLibrariesIndexHandler");
const PageSaveHandler_1 = require("./handler/page/save/PageSaveHandler");
const SetActivePageHandler_1 = require("./handler/page/set/SetActivePageHandler");
const GetPreviewAllDataHandler_1 = require("./handler/preview/GetPreviewAllDataHandler");
const GetUploadedFileHandler_1 = require("./handler/upload/GetUploadedFileHandler");
const PrepareUploadHandler_1 = require("./handler/upload/PrepareUploadHandler");
const UploadHandler_1 = require("./handler/upload/UploadHandler");
const ServerRouter_1 = require("./router/ServerRouter");
function startExperimentationServer(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const router = new ServerRouter_1.ServerRouter();
        registerHandlers(router, options);
        const server = http_1.createServer((request, response) => router.handle(request, response));
        server.listen(options.port);
        const experimentationAppURL = getAPPExperimentationRemoteURL_1.getAPPExperimentationRemoteURL(options);
        yield printServerReadyMessage_1.printServerReadyMessage(experimentationAppURL);
    });
}
exports.startExperimentationServer = startExperimentationServer;
function registerHandlers(router, context) {
    router.register('/ajax/dmsDPPage/Save/', new PageSaveHandler_1.PageSaveHandler(context));
    router.register('/ajax/dmsDPPage/SetActivePage/', new SetActivePageHandler_1.SetActivePageHandler(context));
    router.register('/ajax/dmsFileManager/PrepareUpload/', new PrepareUploadHandler_1.PrepareUploadHandler(context));
    router.register('/upload', new UploadHandler_1.UploadHandler(context));
    router.register(/\/upload\/(\d+)\/(.*)/, new GetUploadedFileHandler_1.GetUploadedFileHandler(context));
    router.register('/code/categories', new GetCategoriesHandler_1.GetCategoriesHandler(context));
    router.register('/code/info', new GetInfoHandler_1.GetInfoHandler(context));
    router.register('/code/library.js', createLibraryBundleHandler_1.createLibraryBundleHandler(context));
    router.register('/code/previews', new GetPreviewsHandler_1.GetPreviewsHandler(context));
    router.register('/code/repositoryPointer', new GetRepositoryPointerHandler_1.GetRepositoryPointerHandler());
    router.register('/code/repositoryPointer/default', new GetRepositoryPointerDefaultHandler_1.GetRepositoryPointerDefaultHandler(context));
    router.register(/^\/documents\/([a-z0-9-_]+)\/variables$/, new GetVariablesHandler_1.GetVariablesHandler(context));
    router.register('/libraries/', new GetLibrariesHandler_1.GetLibrariesHandler(context));
    router.register('/libraries/items/index/', new GetLibrariesIndexHandler_1.GetLibrariesIndexHandler());
    router.register('/preview/all', new GetPreviewAllDataHandler_1.GetPreviewAllDataHandler(context));
}
//# sourceMappingURL=startExperimentationServer.js.map