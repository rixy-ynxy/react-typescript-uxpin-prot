"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVcsDetails = void 0;
const tslib_1 = require("tslib");
const getApiDomain_1 = require("../../../common/services/UXPin/getApiDomain");
const getLatestCommitHash_1 = require("../../../common/services/UXPin/getLatestCommitHash");
const filterMovedFiles_1 = require("./filterMovedFiles");
const getRepositoryAdapter_1 = require("./repositories/getRepositoryAdapter");
function getVcsDetails(paths, buildOptions, categorizedComponents) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const repositoryAdapter = yield getRepositoryAdapter_1.getRepositoryAdapter(paths.projectRoot, buildOptions);
        const repositoryPointer = yield repositoryAdapter.getRepositoryPointer();
        let latestCommitHash = null;
        if (buildOptions.token) {
            latestCommitHash = yield getLatestCommitHash_1.getLatestCommitHash(getApiDomain_1.getApiDomain(buildOptions.uxpinApiDomain), repositoryPointer.branchName, buildOptions.token);
        }
        const vcs = {
            branchName: repositoryPointer.branchName,
            commitHash: repositoryPointer.commit.hash,
            paths,
        };
        if (latestCommitHash) {
            const movedFiles = yield repositoryAdapter.getMovedFiles(latestCommitHash, repositoryPointer.commit.hash);
            vcs.movedObjects = {
                components: filterMovedFiles_1.filterMovedFiles(movedFiles, categorizedComponents),
                diffSourceCommitHash: latestCommitHash,
            };
        }
        return vcs;
    });
}
exports.getVcsDetails = getVcsDetails;
//# sourceMappingURL=getVcsDetails.js.map