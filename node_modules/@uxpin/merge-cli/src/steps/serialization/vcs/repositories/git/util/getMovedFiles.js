"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMovedFiles = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const execAsync_1 = require("../../../../../../utils/child_process/execAsync");
const isCommit_1 = require("./isCommit");
const SIMILARITY_INDEX = 50;
function getMovedFiles(cwd, revision1, revision2) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const revs = {
            [`${revision1}`]: yield isCommit_1.isCommit(cwd, revision1),
            [`${revision2}`]: yield isCommit_1.isCommit(cwd, revision2),
        };
        lodash_1.forEach(revs, (isValidCommit, revision) => {
            if (!isValidCommit) {
                throw new Error(`ðŸ›‘ Unable to find revision ${revision} on your git. Please check the following.
          â€¢ Override push of DS from different repository is not supported. Please reach out to support if necessary.
          â€¢ If using shallow clone then clone depth must be changed as well.
          â€¢ Make sure repository is up-to-date ðŸ‘‰ pull latest changes from remote git. A team member may have pushed
            new changes to UXPin.
      `);
            }
        });
        try {
            const options = { cwd };
            const diff = yield execAsync_1.execAsync(`git diff ${revision1}...${revision2} --diff-filter=R --name-status -M${SIMILARITY_INDEX}%`, options);
            const files = diff.split('\n')
                .filter(Boolean)
                .reduce((pathsMap, line) => {
                const [, sourcePath, newPath] = line.split('\t');
                return Object.assign(Object.assign({}, pathsMap), { [sourcePath]: newPath });
            }, {});
            return files;
        }
        catch (error) {
            return Promise.reject(error);
        }
    });
}
exports.getMovedFiles = getMovedFiles;
//# sourceMappingURL=getMovedFiles.js.map