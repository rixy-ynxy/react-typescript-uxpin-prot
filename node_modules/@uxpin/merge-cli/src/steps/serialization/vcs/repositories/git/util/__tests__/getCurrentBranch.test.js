"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const constants_1 = require("../../../../../../../common/constants");
const execAsync_1 = require("../../../../../../../utils/child_process/execAsync");
const getCurrentBranch_1 = require("../getCurrentBranch");
describe('getCurrentBranch', () => {
    let path;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // given
        path = path_1.resolve(__dirname, '../../../../../../../../test/resources/repos/git-repo');
        yield execAsync_1.execAsync('git checkout master', { cwd: path });
    }));
    it('should return current branch name', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // when
        const branch = yield getCurrentBranch_1.getCurrentBranch(path);
        // then
        expect(branch).toEqual('master');
    }));
    describe('new branch', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // given
            yield execAsync_1.execAsync('git checkout -b test', { cwd: path });
        }));
        it('should return master if not given an override', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // when
            const branch = yield getCurrentBranch_1.getCurrentBranch(path);
            // then
            expect(branch).toEqual(constants_1.DEFAULT_BRANCH_NAME);
        }));
        it('should return the real branch name only if given an override', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // when
            const branch = yield getCurrentBranch_1.getCurrentBranch(path, 'test');
            // then
            expect(branch).toEqual('test');
        }));
        afterEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield execAsync_1.execAsync('git checkout master', { cwd: path });
            yield execAsync_1.execAsync('git branch -D test', { cwd: path });
        }));
    });
});
//# sourceMappingURL=getCurrentBranch.test.js.map