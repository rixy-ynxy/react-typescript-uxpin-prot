"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const serializeExamples_1 = require("../serializeExamples");
describe('getExamples', () => {
    describe('getting list of examples', () => {
        it('should return list of examples for markdown file with many examples', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithExamples.md');
            const expectedExamples = [
                {
                    code: '<DocumentationWithExamples />',
                },
                {
                    code: '<DocumentationWithExamples primary />',
                },
                {
                    code: '<DocumentationWithExamples disabled />',
                },
            ];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
        it('should return one example for markdown file with one example', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithOneExample.md');
            const expectedExamples = [{
                    code: '<DocumentationWithExamples />',
                }];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
        it('should return empty list for markdown file with no example', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithNoExample.md');
            const expectedExamples = [];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
        it('should return empty list for markdown file with examples defined with tab char', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithTabCharacterExamples.md');
            const expectedExamples = [];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
        it('should return list of supported examples for markdown file with both supported & unsupported examples', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithNotSupportedExamples.md');
            const expectedExamples = [
                {
                    code: '<DocumentationWithExamples javascript />',
                },
                {
                    code: '<DocumentationWithExamples jsx />',
                },
                {
                    code: '<DocumentationWithExamples typescript />',
                },
                {
                    code: '<DocumentationWithExamples tsx />',
                },
            ];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
        it('should return list of multiline examples for markdown file with examples', () => {
            const path = path_1.resolve('./test/resources/documentation/examples/DocumentationWithMultilineExamples.md');
            const expectedExamples = [
                {
                    code: `<DocumentationWithMultilineExamples>
    <Line />
    <Line />
    <Line />
</DocumentationWithMultilineExamples>`,
                },
                {
                    code: `// See first example
<DocumentationWithMultilineExamples>
    <Line />
    <Line />
    <Line />
</DocumentationWithMultilineExamples>`,
                },
            ];
            const expectedResult = {
                result: expectedExamples,
                warnings: [],
            };
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => expect(result).toEqual(expectedResult));
        });
    });
    describe('when error occurs', () => {
        it('should return warning', () => {
            const expectedErrorMessage = 'Cannot serialize component examples';
            const expectedOriginalErrorMessage = 'no such file or directory';
            const path = path_1.resolve('./test/resources/documentation/examples/DontExist.md');
            // when
            return serializeExamples_1.serializeExamples(path)
                // then
                .then((result) => {
                expect(result.warnings).toHaveLength(1);
                expect(result.warnings[0].message).toEqual(expectedErrorMessage);
                expect(result.warnings[0].originalError.message).toMatch(expectedOriginalErrorMessage);
            });
        });
    });
});
//# sourceMappingURL=serializeExamples.test.js.map