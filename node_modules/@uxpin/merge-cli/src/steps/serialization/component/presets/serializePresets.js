"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializePresets = void 0;
const thunkFillSourcePath_1 = require("../../../../common/warning/thunkFillSourcePath");
const presetFileNameParser_1 = require("../../../discovery/component/presets/presetFileNameParser");
const collectPresetElements_1 = require("./collectPresetElements");
const getUniqPresetImportName_1 = require("./jsx/bundle/getUniqPresetImportName");
function serializePresets(bundle, infos) {
    const aggregator = { result: [], warnings: [] };
    return infos
        .map(thunkSerializePreset(bundle))
        .reduce((result, presetSerializationResult) => {
        const results = [];
        const warnings = [];
        results.push.apply(result.result, presetSerializationResult.result);
        warnings.push.apply(result.warnings, presetSerializationResult.warnings);
        return result;
    }, aggregator);
}
exports.serializePresets = serializePresets;
function thunkSerializePreset(bundle) {
    return ({ path }) => {
        try {
            const presetData = bundle[getUniqPresetImportName_1.getUniqPresetImportName(path)];
            const { result: elements, warnings } = collectPresetElements_1.collectPresetElements(presetData, { result: {}, warnings: [] });
            return {
                result: [{
                        elements,
                        name: presetFileNameParser_1.getPresetName(path),
                        rootId: presetData.props.uxpId,
                    }],
                warnings: warnings.map(thunkFillSourcePath_1.thunkFillSourcePath(path)),
            };
        }
        catch (error) {
            return getResultForInvalidPreset(path, error);
        }
    };
}
function getResultForInvalidPreset(sourcePath, originalError) {
    const warning = {
        message: 'Cannot serialize component preset',
        originalError,
        sourcePath,
    };
    return { result: [], warnings: [warning] };
}
//# sourceMappingURL=serializePresets.js.map