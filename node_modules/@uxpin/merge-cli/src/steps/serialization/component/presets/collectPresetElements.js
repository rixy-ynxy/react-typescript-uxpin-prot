"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectPresetElements = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const isJSXSerializedElement_1 = require("./isJSXSerializedElement");
const replaceElementsWithReferencesInChildren_1 = require("./replaceElementsWithReferencesInChildren");
const replaceElementsWithReferencesInProps_1 = require("./replaceElementsWithReferencesInProps");
function collectPresetElements(element, elementsCollector) {
    if (!isJSXSerializedElement_1.isJSXSerializedElement(element)) {
        return elementsCollector;
    }
    const { children, name } = element, _a = element.props, { uxpId } = _a, props = tslib_1.__rest(_a, ["uxpId"]);
    if (!uxpId) {
        throw new Error('Missing `uxpId` property');
    }
    elementsCollector.result[uxpId] = {
        name,
        props: Object.assign(Object.assign({}, replaceElementsWithReferencesInProps_1.replaceElementsWithReferencesInProps(props)), replaceElementsWithReferencesInChildren_1.replaceElementsWithReferencesInChildren(element)),
    };
    elementsCollector.warnings.push(...element.warnings);
    if (lodash_1.isArray(children)) {
        lodash_1.forEach(children, (child) => collectPresetElements(child, elementsCollector));
    }
    lodash_1.forEach(props, (prop) => collectPresetElements(prop, elementsCollector));
    return elementsCollector;
}
exports.collectPresetElements = collectPresetElements;
//# sourceMappingURL=collectPresetElements.js.map