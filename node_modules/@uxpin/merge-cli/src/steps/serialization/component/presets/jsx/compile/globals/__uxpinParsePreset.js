"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:function-name
function __uxpinParsePreset(component, props, ...children) {
    if (component === undefined) {
        const error = new Error('Unknown component!');
        error.message = parsePresetErrorMessage(error);
        throw error;
    }
    const componentName = !!component.name ? component.name : 'Unknown';
    return {
        children,
        name: componentName,
        props: JSON.parse(JSON.stringify(props)) || {},
        uxpinPresetElementType: 'CodeComponent',
        warnings: getPropertySerializationWarnings(props),
    };
}
function getPropertySerializationWarnings(props) {
    if (!props) {
        return [];
    }
    return Object.keys(props).reduce((warnings, propName) => {
        const propValue = props[propName];
        if (typeof propValue === 'function') {
            warnings.push({ message: `Unsupported property \`${propName}\` of a type \`${typeof propValue}\`` });
        }
        return warnings;
    }, []);
}
const ERROR_LINES = 5;
function parsePresetErrorMessage(error) {
    if (!error.stack) {
        return error.message;
    }
    const lines = error.stack.split('\n').filter((line) => !line.match(/at __uxpinParsePreset/gi));
    return lines.slice(0, ERROR_LINES).join('\n');
}
global.__uxpinParsePreset = __uxpinParsePreset;
//# sourceMappingURL=__uxpinParsePreset.js.map