"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const replaceElementsWithReferencesInProps_1 = require("../replaceElementsWithReferencesInProps");
describe('replaceElementsWithReferencesInProps', () => {
    it('should replace single element with reference', () => {
        // given
        const props = {
            icon: {
                name: 'Button',
                props: {
                    uxpId: '1',
                },
                uxpinPresetElementType: 'CodeComponent',
            },
        };
        const expectedProps = {
            icon: { uxpinPresetElementId: '1' },
        };
        // when
        const result = replaceElementsWithReferencesInProps_1.replaceElementsWithReferencesInProps(props);
        // then
        expect(result).toEqual(expectedProps);
    });
    it('should remove a few elements in array', () => {
        // given
        const props = {
            icon: [
                {
                    name: 'Button',
                    props: {
                        uxpId: '1',
                    },
                    uxpinPresetElementType: 'CodeComponent',
                },
                {
                    name: 'Button',
                    props: {
                        uxpId: '2',
                    },
                    uxpinPresetElementType: 'CodeComponent',
                },
            ],
        };
        const expectedProps = {
            icon: [],
        };
        // when
        const result = replaceElementsWithReferencesInProps_1.replaceElementsWithReferencesInProps(props);
        // then
        expect(result).toEqual(expectedProps);
    });
    it('should remove deeply nested elements', () => {
        // given
        const props = {
            data: [
                {
                    subtitle: [
                        'some text',
                        {
                            name: 'Icon',
                            props: {
                                uxpId: '1',
                            },
                            uxpinPresetElementType: 'CodeComponent',
                        },
                    ],
                    title: 'some title',
                },
                {
                    subtitle: {
                        name: 'Icon',
                        props: {
                            uxpId: '1',
                        },
                        uxpinPresetElementType: 'CodeComponent',
                    },
                    title: 'some title',
                },
                {
                    subtitle: 'some subtitle',
                    title: 'some title',
                },
            ],
        };
        const expectedProps = {
            data: [
                { subtitle: ['some text'], title: 'some title' },
                { title: 'some title' },
                { subtitle: 'some subtitle', title: 'some title' },
            ],
        };
        // when
        const result = replaceElementsWithReferencesInProps_1.replaceElementsWithReferencesInProps(props);
        // then
        expect(result).toEqual(expectedProps);
    });
    it('should return empty object', () => {
        // given
        const props = {};
        const expectedProps = {};
        // when
        const result = replaceElementsWithReferencesInProps_1.replaceElementsWithReferencesInProps(props);
        // then
        expect(result).toEqual(expectedProps);
    });
});
//# sourceMappingURL=replaceElementsWithReferencesInProps.test.js.map