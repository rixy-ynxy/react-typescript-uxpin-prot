"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPresetsBundleWebpackConfig = void 0;
const path_1 = require("path");
const webpack_merge_1 = require("webpack-merge");
const VirtualModulesPlugin = require("webpack-virtual-modules");
function getPresetsBundleWebpackConfig({ bundlePath, projectRoot, sourcePath, virtualModules, webpackConfig, }) {
    const { base, dir } = path_1.parse(bundlePath);
    const config = {
        entry: [
            path_1.resolve(__dirname, './globals/__uxpinParsePreset.js'),
            sourcePath,
        ],
        mode: 'development',
        module: {
            rules: [
                {
                    loader: require.resolve('babel-loader'),
                    options: {
                        babelrc: false,
                        plugins: [
                            require.resolve('@babel/plugin-proposal-class-properties'),
                        ],
                        presets: [
                            require.resolve('@babel/preset-flow'),
                            [require.resolve('@babel/preset-react'), {
                                    pragma: '__uxpinParsePreset',
                                }],
                        ],
                    },
                    test: /\.jsx?$/,
                },
                {
                    loader: require.resolve('ignore-loader'),
                    test: /\.css$/,
                },
            ],
        },
        optimization: {
            runtimeChunk: false,
            splitChunks: false,
        },
        output: {
            filename: base,
            libraryTarget: 'commonjs',
            path: dir,
        },
        plugins: [
            getVirtualModulesPlugin(virtualModules),
        ],
        resolve: {
            extensions: ['.js', '.jsx'],
            modules: [
                'node_modules',
                // @todo remove it after refactoring integration test structure
                path_1.resolve('../../../../../../../node_modules'),
            ],
        },
        resolveLoader: {
            modules: [
                'node_modules',
                // @todo remove it after refactoring integration test structure
                path_1.resolve('../../../../../../../node_modules'),
            ],
        },
    };
    if (webpackConfig) {
        const configProvider = require(path_1.join(projectRoot, webpackConfig));
        const userWebpackConfig = isConfigurationFunction(configProvider) ? configProvider() : configProvider;
        return webpack_merge_1.smartStrategy({ entry: 'replace' })(userWebpackConfig, config);
    }
    return config;
}
exports.getPresetsBundleWebpackConfig = getPresetsBundleWebpackConfig;
function getVirtualModulesPlugin(virtualModules) {
    return new VirtualModulesPlugin(virtualModules.reduce((result, { moduleSource, path }) => (Object.assign(Object.assign({}, result), { [path]: moduleSource })), {}));
}
function isConfigurationFunction(conf) {
    return typeof conf === 'function';
}
//# sourceMappingURL=getPresetsBundleWebpackConfig.js.map