"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const using_1 = require("../../../../../../../../test/utils/using");
const ComponentPropertyDefinition_1 = require("../../../../implementation/ComponentPropertyDefinition");
const parseTypeTag_1 = require("../parseTypeTag");
const cases = [
    ...Object.values(ComponentPropertyDefinition_1.CustomControlTypeName)
        .filter((customType) => customType !== ComponentPropertyDefinition_1.CustomControlTypeName.Textfield)
        .map((customType) => {
        return {
            expectedValue: {
                serialized: {
                    customType: {
                        name: customType,
                        structure: {},
                    },
                },
                type: ComponentPropertyDefinition_1.CustomDescriptorsTags.TYPE,
            },
            tag: customType,
        };
    }),
    {
        expectedValue: {
            serialized: {
                customType: {
                    name: ComponentPropertyDefinition_1.CustomControlTypeName.Textfield,
                    structure: {
                        rows: 3,
                    },
                },
            },
            type: ComponentPropertyDefinition_1.CustomDescriptorsTags.TYPE,
        },
        tag: 'textfield',
    },
    {
        expectedValue: {
            serialized: {
                customType: {
                    name: ComponentPropertyDefinition_1.CustomControlTypeName.Textfield,
                    structure: {
                        rows: 10000,
                    },
                },
            },
            type: ComponentPropertyDefinition_1.CustomDescriptorsTags.TYPE,
        },
        tag: 'textfield(10000)',
    },
    {
        expectedValue: undefined,
        tag: 'textfield(Infinity)',
    },
    {
        expectedValue: undefined,
        tag: 'textfield(abc)',
    },
    {
        expectedValue: undefined,
        tag: 'unknown',
    },
];
describe('parseTypeTag', () => {
    using_1.using(cases)
        .describe('should parse custom types', ({ tag, expectedValue }) => {
        it(tag, () => expect(parseTypeTag_1.parseTypeTag(tag)).toEqual(expectedValue));
    });
});
//# sourceMappingURL=parseTypeTag.test.js.map