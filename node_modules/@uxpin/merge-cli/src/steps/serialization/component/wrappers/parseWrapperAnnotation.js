"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseWrapperAnnotation = void 0;
const getLines_1 = require("../comments/getLines");
const CommentTags_1 = require("../CommentTags");
const ComponentWrapper_1 = require("./ComponentWrapper");
const getWrapperNameFromPath_1 = require("./getWrapperNameFromPath");
const isBuiltInWrapper_1 = require("./isBuiltInWrapper");
function parseWrapperAnnotation(commentTag) {
    if (!commentTag.startsWith(CommentTags_1.CommentTags.UXPIN_WRAPPERS)) {
        return [];
    }
    const wrappersNames = parseCommentToLines(commentTag);
    return wrappersNames.map((name) => pathOrNameToWrapper(name));
}
exports.parseWrapperAnnotation = parseWrapperAnnotation;
function pathOrNameToWrapper(nameOrPath) {
    if (isBuiltInWrapper_1.isBuiltInWrapper(nameOrPath)) {
        return {
            name: nameOrPath,
            type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
        };
    }
    return {
        name: getWrapperNameFromPath_1.getWrapperNameFromPath(nameOrPath),
        path: nameOrPath,
        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
    };
}
const STRIP_TAG_REGEX = new RegExp(`^(\\s)?\\${CommentTags_1.CommentTags.UXPIN_WRAPPERS}(\\s+)?`);
function parseCommentToLines(commentTag) {
    return getLines_1.getLines(commentTag.replace(STRIP_TAG_REGEX, ''))
        .reduce((lines, line) => {
        const wrappers = line
            .split(',')
            .map((wrapper) => wrapper.trim());
        return [
            ...lines,
            ...wrappers,
        ];
    }, [])
        .filter(Boolean);
}
//# sourceMappingURL=parseWrapperAnnotation.js.map