"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ComponentPropertyDefinition_1 = require("../../../ComponentPropertyDefinition");
const getPropertyCustomDescriptorsWithWarnings_1 = require("../getPropertyCustomDescriptorsWithWarnings");
describe('getPropertyCustomDescriptorsWithWarnings', () => {
    it('should not add any custom property descriptors if not provided in description', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // given
        const property = {
            defaultValue: '',
            description: '',
            required: false,
            type: { name: 'string' },
        };
        // when
        const descriptors = yield getPropertyCustomDescriptorsWithWarnings_1.getPropertyCustomDescriptorsWithWarnings(property);
        // then
        expect(descriptors).toEqual({
            result: { descriptors: [] },
            warnings: [],
        });
    }));
    it('should parse multiple descriptors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // given
        const property = {
            defaultValue: '',
            description: `@uxpindescription Some desc
@uxpinpropname test`,
            required: false,
            type: { name: 'string' },
        };
        // when
        const descriptors = yield getPropertyCustomDescriptorsWithWarnings_1.getPropertyCustomDescriptorsWithWarnings(property);
        // then
        const expected = {
            result: {
                descriptors: [
                    {
                        serialized: { customDescription: 'Some desc' },
                        type: ComponentPropertyDefinition_1.CustomDescriptorsTags.DESCRIPTION,
                    },
                    {
                        serialized: { customName: 'test' },
                        type: ComponentPropertyDefinition_1.CustomDescriptorsTags.NAME,
                    },
                ],
            },
            warnings: [],
        };
        expect(descriptors).toEqual(expected);
    }));
});
//# sourceMappingURL=getPropertyCustomDescriptorsWithWarnings.test.js.map