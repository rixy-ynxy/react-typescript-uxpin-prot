"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNodeExported = void 0;
const lodash_1 = require("lodash");
const ts = require("typescript");
const getNodeName_1 = require("../node/getNodeName");
function isNodeNamePassedAsArgument(expression, nodeName) {
    return !!lodash_1.find(expression.arguments, (arg) => getNodeName_1.getNodeName(arg) === nodeName);
}
function hasProperName(nodeName, el) {
    return getNodeName_1.getNodeName(el) === nodeName;
}
function isNodeExported(node, nodeName) {
    /**
     * Handling following cases:
     * export default Component
     * export HOC(Component)
     */
    if (ts.isExportAssignment(node)
        && (getNodeName_1.getNodeName(node) === nodeName || isNodeNamePassedAsArgument(node.expression, nodeName))) {
        return true;
    }
    /**
     * Handling following cases:
     * export { Component };
     * export { Component as default };
     */
    if (ts.isExportDeclaration(node) && node.exportClause) {
        const { elements } = (node.exportClause || { elements: [] });
        return !!lodash_1.find(elements, hasProperName.bind(null, nodeName));
    }
    return false;
}
exports.isNodeExported = isNodeExported;
//# sourceMappingURL=isNodeExported.js.map