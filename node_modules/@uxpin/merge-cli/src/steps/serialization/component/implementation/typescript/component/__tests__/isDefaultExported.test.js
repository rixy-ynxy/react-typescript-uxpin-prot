"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImplementation = void 0;
const getExampleComponentPath_1 = require("../../../../../../../../test/utils/resources/getExampleComponentPath");
const using_1 = require("../../../../../../../../test/utils/using");
const getSerializationContext_1 = require("../../context/getSerializationContext");
const getComponentDeclaration_1 = require("../getComponentDeclaration");
const isDefaultExported_1 = require("../isDefaultExported");
function getImplementation(componentName) {
    return {
        framework: 'reactjs',
        lang: 'typescript',
        path: getExampleComponentPath_1.getTypeScriptComponentPath(componentName),
    };
}
exports.getImplementation = getImplementation;
describe('getComponentNameFromStoriesTitle', () => {
    const cases = [
        /////////// Class components
        ////// Default exported
        // export default class Component
        { filename: 'ClassWithDefaults', componentName: 'ClassWithDefaults', expected: true },
        // class Component
        // export default Component
        {
            componentName: 'ClassWithSeparateDefaultExportDeclaratin',
            expected: true,
            filename: 'ClassWithSeparateDefaultExportDeclaratin',
        },
        // /**
        //  * @uxpincomponent
        //  */
        // export class ClassPrependedWithCommentToBeComposedWithHOC
        // export default HOC(ClassPrependedWithCommentToBeComposedWithHOC)
        {
            componentName: 'ClassPrependedWithCommentToBeComposedWithHOC',
            expected: true,
            filename: 'DefaultExportedClassComposedWithHOCAndComment',
        },
        ////// Named exported
        // export class ClassWithNamedExport
        {
            componentName: 'NamedExportedClassMatchingFilename',
            expected: false,
            filename: 'NamedExportedClassMatchingFilename',
        },
        // class ClassWithNamedExport
        // export ClassWithNamedExport;
        {
            componentName: 'NamedExportedClassMatchingFilenameWithSeparateExportDeclaration',
            expected: false,
            filename: 'NamedExportedClassMatchingFilenameWithSeparateExportDeclaration',
        },
        /////////// Function components
        ////// Default exported
        // export default function()
        { filename: 'FunctionPrimitivesOnly', componentName: 'FunctionPrimitivesOnly', expected: true },
        // export default () => {}
        {
            componentName: 'DefaultExportedArrowFunctionWithDefaultsInDestructuring',
            expected: true,
            filename: 'DefaultExportedArrowFunctionWithDefaultsInDestructuring',
        },
        // const FunctionWithDefaults = () => {}
        // export default FunctionWithDefaults;
        {
            componentName: 'ArrowFunctionWithDefaultsAsStaticProperty',
            expected: true,
            filename: 'ArrowFunctionWithDefaultsAsStaticProperty',
        },
        // export function DefaultExportedFunctionalComponentMatchingFilenameComposedWithHOC()
        // export default HOC(DefaultExportedFunctionalComponentMatchingFilenameComposedWithHOC);
        {
            componentName: 'DefaultExportedFunctionalComponentMatchingFilenameComposedWithHOC',
            expected: true,
            filename: 'DefaultExportedFunctionalComponentMatchingFilenameComposedWithHOC',
        },
        // /**
        //  * @uxpincomponent
        //  */
        // const FunctionWithComponentDeclarationAndCustomName = () => {}
        // export default HOC(FunctionWithComponentDeclarationAndCustomName)
        {
            componentName: 'FunctionalComponentPrependedWithCommentToBeComposedWithHOC',
            expected: true,
            filename: 'DefaultExportedFunctionalComponentComposedWithHOCAndComment',
        },
        ////// Named exported
        // export const ArrowFunctionWithNamedExport = () => {}
        {
            componentName: 'ArrowFunctionWithNamedExport',
            expected: false,
            filename: 'ArrowFunctionWithNamedExport',
        },
        // // export function FunctionWithNamedExport() {}
        {
            componentName: 'FunctionWithNamedExport',
            expected: false,
            filename: 'FunctionWithNamedExport',
        },
        // // function FunctionWithSeparateNamedExportDeclaration() {}
        // // export { FunctionWithSeparateNamedExportDeclaration }
        {
            componentName: 'FunctionWithSeparateNamedExportDeclaration',
            expected: false,
            filename: 'FunctionWithSeparateNamedExportDeclaration',
        },
        // // const ArrowFunctionWithSeparateNamedExportDeclaration = () => {}
        // // export { ArrowFunctionWithSeparateNamedExportDeclaration }
        {
            componentName: 'ArrowFunctionWithSeparateNamedExportDeclaration',
            expected: false,
            filename: 'ArrowFunctionWithSeparateNamedExportDeclaration',
        },
        /////////// component with ForwardRef
        // export default React.forwardRef
        {
            componentName: 'DefaultExportedComponentWithForwardRef',
            expected: true,
            filename: 'DefaultExportedComponentWithForwardRef',
        },
        // const Component = React.forwardRef
        // export { Component }
        {
            componentName: 'NamedExportedComponentWithForwardRef',
            expected: false,
            filename: 'NamedExportedComponentWithForwardRef',
        },
        /////////// Other
        // export { Component as default }
        {
            componentName: 'DefaultExportedWithAsDefaultStatement',
            expected: true,
            filename: 'DefaultExportedWithAsDefaultStatement',
        },
    ];
    using_1.using(cases).describe('checking if isDefaultExported correctly detect default export', ({ filename, componentName, expected }) => {
        it(`for given ${componentName} in ${filename}`, () => {
            const component = getImplementation(filename);
            const context = getSerializationContext_1.getSerializationContext(component);
            const declaration = getComponentDeclaration_1.getComponentDeclaration(context);
            if (declaration) {
                expect(isDefaultExported_1.isDefaultExported(declaration, context)).toEqual(expected);
            }
            else {
                console.log(`Failed to find declaration for ${filename}`);
            }
        });
    });
});
//# sourceMappingURL=isDefaultExported.test.js.map