"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropertiesFromType = void 0;
const lodash_1 = require("lodash");
// Blacklist types like 'HTMLAttributes' because those types instantly creates
// hundreds of props attributes and users don't want them to be visible on UXPin editor.
const BLACKLIST_NAMESPACES = [
    'React',
];
function getPropertiesFromType(type) {
    if (type.isUnion()) {
        return getPropertiesFromUnionType(type);
    }
    return {
        baseProps: getBasePropertiesFromType(type),
        exclusiveProps: [],
    };
}
exports.getPropertiesFromType = getPropertiesFromType;
function getBasePropertiesFromType(type) {
    return type.getProperties().filter((property, i) => {
        var _a, _b, _c, _d, _e;
        // property.syntheticOrigin is useful when people use utility types
        // like "Omit" because we need to point back to original type to see if it's from React
        // @ts-ignore
        // tslint:disable-next-line: max-line-length
        const parentNameSpace = ((_b = (_a = property.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.escapedName) || ((_e = (_d = (_c = property.syntheticOrigin) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.escapedName);
        if (parentNameSpace && BLACKLIST_NAMESPACES.includes(parentNameSpace)) {
            return false;
        }
        return true;
    });
}
function getPropertiesFromUnionType(type) {
    const baseProps = getBasePropertiesFromType(type);
    const allProps = lodash_1.flatMap(type.types, (innerType) => innerType.getProperties());
    const exclusiveProps = lodash_1.uniq(lodash_1.differenceBy(allProps, baseProps, 'name'));
    return {
        baseProps,
        exclusiveProps,
    };
}
//# sourceMappingURL=getPropertiesFromType.js.map