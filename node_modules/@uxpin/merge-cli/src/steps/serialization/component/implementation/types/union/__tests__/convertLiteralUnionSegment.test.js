"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const using_1 = require("../../../../../../../../test/utils/using");
const convertLiteralUnionSegment_1 = require("../convertLiteralUnionSegment");
describe('convertLiteralUnionSegment', () => {
    describe('strings', () => {
        const cases = [
            {
                expected: { name: 'literal', structure: { value: 'someValue' } },
                having: '"someValue"',
                title: 'parse literals with double quotes correctly',
            },
            {
                expected: { name: 'literal', structure: { value: 'someValue' } },
                having: `'someValue'`,
                title: 'parse literals with single quotes correctly',
            },
            {
                expected: null,
                having: '"without closing quote',
                title: 'return null when value can not be parsed',
            },
            {
                expected: null,
                having: '""',
                title: 'return null when value is empty',
            },
        ];
        using_1.using(cases)
            .describe('should', (testCase) => {
            it(testCase.title, () => {
                expect(convertLiteralUnionSegment_1.convertLiteralUnionSegment(testCase.having)).toEqual(testCase.expected);
            });
        });
    });
    describe('numbers', () => {
        const cases = [
            {
                expected: { name: 'literal', structure: { value: 123 } },
                having: '123',
                title: 'parse numbers correctly',
            },
            {
                expected: { name: 'literal', structure: { value: -123 } },
                having: '-123',
                title: 'parse negative numbers correctly',
            },
            {
                expected: { name: 'literal', structure: { value: -123.4205403 } },
                having: '-123.4205403',
                title: 'parse float numbers correctly',
            },
            {
                expected: { name: 'literal', structure: { value: 0 } },
                having: '0',
                title: 'parse zero correctly',
            },
        ];
        using_1.using(cases)
            .describe('should', (testCase) => {
            it(testCase.title, () => {
                expect(convertLiteralUnionSegment_1.convertLiteralUnionSegment(testCase.having)).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=convertLiteralUnionSegment.test.js.map