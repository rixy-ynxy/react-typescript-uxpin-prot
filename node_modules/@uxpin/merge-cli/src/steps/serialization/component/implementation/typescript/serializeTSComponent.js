"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTSComponent = void 0;
const tslib_1 = require("tslib");
const joinWarningLists_1 = require("../../../../../common/warning/joinWarningLists");
const validateWrappers_1 = require("../../../validation/validateWrappers");
const serializeAndValidateParsedProperties_1 = require("../../props/serializeAndValidateParsedProperties");
const getComponentDeclaration_1 = require("./component/getComponentDeclaration");
const getComponentDocUrl_1 = require("./component/getComponentDocUrl");
const getComponentName_1 = require("./component/getComponentName");
const getComponentNamespace_1 = require("./component/getComponentNamespace");
const getComponentWrappers_1 = require("./component/getComponentWrappers");
const isDefaultExported_1 = require("./component/isDefaultExported");
const getSerializationContext_1 = require("./context/getSerializationContext");
const parseTSComponentProperties_1 = require("./parseTSComponentProperties");
function serializeTSComponent(component) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const context = getSerializationContext_1.getSerializationContext(component);
        const declaration = getComponentDeclaration_1.getComponentDeclaration(context);
        if (!declaration) {
            throw new Error('No component found!');
        }
        const name = getComponentName_1.getComponentName(context, declaration);
        const parsedProps = parseTSComponentProperties_1.parseTSComponentProperties(context, declaration);
        const validatedProps = serializeAndValidateParsedProperties_1.serializeAndValidateParsedProperties(parsedProps);
        const namespace = getComponentNamespace_1.getComponentNamespace(declaration, name);
        const componentDocUrl = getComponentDocUrl_1.getComponentDocUrl(declaration);
        const wrappers = getComponentWrappers_1.getComponentWrappers(declaration);
        const validatedWrappers = validateWrappers_1.validateWrappers(wrappers, component);
        const defaultExported = isDefaultExported_1.isDefaultExported(declaration, context);
        return {
            result: {
                componentDocUrl,
                defaultExported,
                name,
                namespace,
                properties: validatedProps.map(({ result }) => result),
                wrappers: validatedWrappers.result,
            },
            warnings: joinWarningLists_1.joinWarningLists([
                ...validatedProps.map(({ warnings }) => warnings),
                validatedWrappers.warnings,
            ], component.path),
        };
    });
}
exports.serializeTSComponent = serializeTSComponent;
//# sourceMappingURL=serializeTSComponent.js.map