"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFunctionFromVariableDeclaration = void 0;
const ts = require("typescript");
const getVariableStatement_1 = require("./getVariableStatement");
/**
 * Example use case:
 * const _Component = () => {};
 * export const Component = forwardRef(_Component);
 * when Component variable declaration is passed it returns the function expression assigned to the variable _Component
 */
function findFunctionFromVariableDeclaration(sourceFile, variableDeclaration) {
    var _a, _b;
    const argument = variableDeclaration.initializer.arguments[0];
    if (ts.isIdentifier(argument)) {
        const internalVariable = getVariableStatement_1.getVariableStatement(sourceFile, argument.escapedText);
        const initializer = (_b = (_a = internalVariable === null || internalVariable === void 0 ? void 0 : internalVariable.declarationList) === null || _a === void 0 ? void 0 : _a.declarations[0]) === null || _b === void 0 ? void 0 : _b.initializer;
        if (initializer && ts.isArrowFunction(initializer) || ts.isFunctionExpression(initializer)) {
            return initializer;
        }
    }
    if (ts.isArrowFunction(argument) || ts.isFunctionExpression(argument)) {
        return argument;
    }
}
exports.findFunctionFromVariableDeclaration = findFunctionFromVariableDeclaration;
//# sourceMappingURL=findFunctionFromVariableDeclaration.js.map