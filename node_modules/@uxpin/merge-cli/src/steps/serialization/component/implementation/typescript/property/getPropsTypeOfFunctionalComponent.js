"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropsTypeOfFunctionalComponent = void 0;
const ts = require("typescript");
const isFunctionalComponentWithReactForwardRef_1 = require("../component/isFunctionalComponentWithReactForwardRef");
const isReactFunctionComponent_1 = require("../component/isReactFunctionComponent");
function getPropsTypeOfFunctionalComponent(func, variableDeclaration) {
    var _a, _b;
    if (!func.parameters && !variableDeclaration) {
        return;
    }
    // (props:Props) => {}
    if ((_a = func.parameters[0]) === null || _a === void 0 ? void 0 : _a.type) {
        return (_b = func.parameters[0]) === null || _b === void 0 ? void 0 : _b.type;
    }
    // React.forwardRef<HTMLElementProps, Props>((props) => {})
    if (isFunctionalComponentWithReactForwardRef_1.isFunctionalComponentWithReactForwardRef(func.parent)) {
        const typeArguments = func.parent.typeArguments;
        if (typeArguments && typeArguments[1]) {
            return typeArguments[1];
        }
    }
    const variableType = variableDeclaration === null || variableDeclaration === void 0 ? void 0 : variableDeclaration.type;
    // const Component:React.FC<Props> = () =>{};
    if (variableType && variableType.typeArguments && isReactFunctionComponent_1.isReactFunctionComponent(variableType.typeName)) {
        return variableType.typeArguments[0];
    }
    // const Component = React.forwardRef<HTMLElementProps, Props>(() => {});
    if (variableDeclaration && isFunctionalComponentWithReactForwardRef_1.isFunctionalComponentWithReactForwardRef(variableDeclaration)) {
        const typeArguments = variableDeclaration.initializer.typeArguments;
        if (typeArguments && typeArguments[1]) {
            return typeArguments[1];
        }
    }
    // custom generic types
    // argument should contain props in name
    // const Component:CustomType<abc, MyProps, html> = () =>{};
    if (variableType && variableType.typeArguments) {
        const typeNode = variableType.typeArguments.find((arg) => {
            var _a;
            return ts.isTypeReferenceNode(arg) &&
                String((_a = arg.typeName) === null || _a === void 0 ? void 0 : _a.escapedText).toLowerCase().indexOf('props') !== -1;
        });
        if (typeNode) {
            return typeNode;
        }
    }
    return variableType;
}
exports.getPropsTypeOfFunctionalComponent = getPropsTypeOfFunctionalComponent;
//# sourceMappingURL=getPropsTypeOfFunctionalComponent.js.map