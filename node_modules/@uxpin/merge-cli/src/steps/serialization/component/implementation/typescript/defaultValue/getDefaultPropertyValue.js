"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultValueFromIdentifier = exports.getDefaultValueFromNewExpression = exports.getDefaultValueFromPropertyAccessExpression = exports.getDefaultPropertyValue = void 0;
const ts = require("typescript");
function getDefaultPropertyValue(context, valueInitializer) {
    switch (valueInitializer.kind) {
        case ts.SyntaxKind.StringLiteral:
            return valueInitializer.text;
        case ts.SyntaxKind.NumericLiteral:
            return parseInt(valueInitializer.text, 10);
        case ts.SyntaxKind.TrueKeyword:
            return true;
        case ts.SyntaxKind.FalseKeyword:
            return false;
        case ts.SyntaxKind.Identifier:
            return getDefaultValueFromIdentifier(context, valueInitializer);
        case ts.SyntaxKind.PropertyAccessExpression:
            return getDefaultValueFromPropertyAccessExpression(context, valueInitializer);
        case ts.SyntaxKind.NewExpression:
            return getDefaultValueFromNewExpression(valueInitializer);
        default:
            return;
    }
}
exports.getDefaultPropertyValue = getDefaultPropertyValue;
function getDefaultValueFromPropertyAccessExpression(context, propertyInitializer) {
    const symbol = context.checker.getSymbolAtLocation(propertyInitializer);
    if (symbol && ts.isEnumMember(symbol.valueDeclaration) && symbol.valueDeclaration.initializer) {
        return getDefaultPropertyValue(context, symbol.valueDeclaration.initializer);
    }
    return;
}
exports.getDefaultValueFromPropertyAccessExpression = getDefaultValueFromPropertyAccessExpression;
function getDefaultValueFromNewExpression(propertyInitializer) {
    if (propertyInitializer.arguments &&
        propertyInitializer.expression.escapedText === 'Date') {
        const dateProps = propertyInitializer.arguments
            .map((argument) => {
            switch (argument.kind) {
                case ts.SyntaxKind.StringLiteral:
                    return argument.text;
                case ts.SyntaxKind.NumericLiteral:
                    return parseInt(argument.text, 10);
                default:
                    return;
            }
        });
        return new Date(...dateProps).toJSON();
    }
    return false;
}
exports.getDefaultValueFromNewExpression = getDefaultValueFromNewExpression;
function getDefaultValueFromIdentifier(context, propertyInitializer) {
    const symbol = context.checker.getSymbolAtLocation(propertyInitializer);
    if (symbol && ts.isVariableDeclaration(symbol.valueDeclaration) && symbol.valueDeclaration.initializer) {
        return getDefaultPropertyValue(context, symbol.valueDeclaration.initializer);
    }
}
exports.getDefaultValueFromIdentifier = getDefaultValueFromIdentifier;
//# sourceMappingURL=getDefaultPropertyValue.js.map