"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serializeTSComponent_1 = require("../serializeTSComponent");
const serializeTSComponent_test_1 = require("./serializeTSComponent.test");
describe('serializeTSComponent-Namespaces', () => {
    describe('class component', () => {
        it('is serialized correctly with provided namespace', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // having
            const component = serializeTSComponent_test_1.getImplementation('ClassWithNamespaceDeclaration');
            const expectedMetadata = {
                defaultExported: true,
                name: 'ClassWithNamespaceDeclaration',
                namespace: {
                    importSlug: 'Namespace_ClassWithNamespaceDeclaration',
                    name: 'Namespace',
                },
                properties: [
                    {
                        description: '',
                        isRequired: true,
                        name: 'name',
                        type: { name: 'string', structure: {} },
                    },
                ],
                wrappers: [],
            };
            // when
            const metadata = yield serializeTSComponent_1.serializeTSComponent(component);
            // then
            expect(metadata.warnings).toEqual([]);
            expect(metadata.result).toEqual(expectedMetadata);
        }));
        it('is serialized correctly with multilevel namespace', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // having
            const component = serializeTSComponent_test_1.getImplementation('ClassWithMultilevelNamespaceDeclaration');
            const expectedMetadata = {
                defaultExported: true,
                name: 'ClassWithMultilevelNamespaceDeclaration',
                namespace: {
                    importSlug: 'Some_Nested_Namespace_ClassWithMultilevelNamespaceDeclaration',
                    name: 'Some.Nested.Namespace',
                },
                properties: [
                    {
                        description: '',
                        isRequired: true,
                        name: 'name',
                        type: { name: 'string', structure: {} },
                    },
                ],
                wrappers: [],
            };
            // when
            const metadata = yield serializeTSComponent_1.serializeTSComponent(component);
            // then
            expect(metadata.warnings).toEqual([]);
            expect(metadata.result).toEqual(expectedMetadata);
        }));
    });
    describe('functional component', () => {
        it('is serialized correctly with provided namespace', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // having
            const component = serializeTSComponent_test_1.getImplementation('FunctionWithNamespaceDeclaration');
            const expectedMetadata = {
                defaultExported: true,
                name: 'FunctionWithNamespaceDeclaration',
                namespace: {
                    importSlug: 'Namespace_FunctionWithNamespaceDeclaration',
                    name: 'Namespace',
                },
                properties: [
                    {
                        description: '',
                        isRequired: true,
                        name: 'name',
                        type: { name: 'string', structure: {} },
                    },
                ],
                wrappers: [],
            };
            // when
            const metadata = yield serializeTSComponent_1.serializeTSComponent(component);
            // then
            expect(metadata.warnings).toEqual([]);
            expect(metadata.result).toEqual(expectedMetadata);
        }));
        it('is serialized correctly with multilevel namespace', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // having
            const component = serializeTSComponent_test_1.getImplementation('FunctionWithMultilevelNamespaceDeclaration');
            const expectedMetadata = {
                defaultExported: true,
                name: 'FunctionWithMultilevelNamespaceDeclaration',
                namespace: {
                    importSlug: 'Some_Nested_Namespace_FunctionWithMultilevelNamespaceDeclaration',
                    name: 'Some.Nested.Namespace',
                },
                properties: [
                    {
                        description: '',
                        isRequired: true,
                        name: 'name',
                        type: { name: 'string', structure: {} },
                    },
                ],
                wrappers: [],
            };
            // when
            const metadata = yield serializeTSComponent_1.serializeTSComponent(component);
            // then
            expect(metadata.warnings).toEqual([]);
            expect(metadata.result).toEqual(expectedMetadata);
        }));
    });
});
//# sourceMappingURL=serializeTSComponent-Namespaces.test.js.map