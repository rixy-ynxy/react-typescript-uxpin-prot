"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentPropertyDefinition_1 = require("../../../ComponentPropertyDefinition");
const getPropertyCustomDescriptors_1 = require("../getPropertyCustomDescriptors");
describe('getPropertyCustomDescriptors', () => {
    it('should not add any custom property descriptors if not provided in description', () => {
        // given
        const desc = '';
        // when
        const descriptors = getPropertyCustomDescriptors_1.getPropertyCustomDescriptors(desc);
        // then
        expect(descriptors).toEqual({ descriptors: [] });
    });
    it('should parse single descriptor', () => {
        // given
        const desc = '@uxpinpropname test';
        // when
        const descriptors = getPropertyCustomDescriptors_1.getPropertyCustomDescriptors(desc);
        // then
        const expected = {
            descriptors: [
                {
                    serialized: { customName: 'test' },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.NAME,
                },
            ],
        };
        expect(descriptors).toEqual(expected);
    });
    it('should parse multiple descriptors', () => {
        // given
        const desc = `@uxpindescription Some desc
@uxpinpropname test`;
        // when
        const descriptors = getPropertyCustomDescriptors_1.getPropertyCustomDescriptors(desc);
        // then
        const expected = {
            descriptors: [
                {
                    serialized: { customDescription: 'Some desc' },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.DESCRIPTION,
                },
                {
                    serialized: {
                        customName: 'test',
                    },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.NAME,
                },
            ],
        };
        expect(descriptors).toEqual(expected);
    });
    it('should deal with multiline descriptors', () => {
        // given
        const desc = `@uxpindescription Multiline
awesome
description.
@uxpinpropname test`;
        // when
        const descriptors = getPropertyCustomDescriptors_1.getPropertyCustomDescriptors(desc);
        // then
        const expected = {
            descriptors: [
                {
                    serialized: {
                        customDescription: `Multiline
awesome
description.`,
                    },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.DESCRIPTION,
                },
                {
                    serialized: {
                        customName: 'test',
                    },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.NAME,
                },
            ],
        };
        expect(descriptors).toEqual(expected);
    });
    it('should trim whitespaces', () => {
        // given
        // tslint:disable-next-line:max-line-length
        const desc = '    @uxpindescription      Multiline\nawesome     \n\n     description.\n   			@uxpinpropname      test     ';
        // when
        const descriptors = getPropertyCustomDescriptors_1.getPropertyCustomDescriptors(desc);
        // then
        const expected = {
            descriptors: [
                {
                    serialized: {
                        customDescription: `Multiline
awesome

description.`,
                    },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.DESCRIPTION,
                },
                {
                    serialized: {
                        customName: 'test',
                    },
                    type: ComponentPropertyDefinition_1.CustomDescriptorsTags.NAME,
                },
            ],
        };
        expect(descriptors).toEqual(expected);
    });
});
//# sourceMappingURL=parsePropertyDescription.test.js.map