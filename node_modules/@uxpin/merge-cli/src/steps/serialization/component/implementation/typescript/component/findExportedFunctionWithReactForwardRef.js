"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findExportedFunctionWithReactForwardRef = exports.isDefaultExportedForwardRef = void 0;
const ts = require("typescript");
const getVariableStatement_1 = require("./getVariableStatement");
const isExported_1 = require("./isExported");
const isFunctionalComponentWithReactForwardRef_1 = require("./isFunctionalComponentWithReactForwardRef");
const isNodeExported_1 = require("./isNodeExported");
function isDefaultExportedForwardRef(node) {
    return ts.isExportAssignment(node)
        && ts.isCallExpression(node.expression)
        && isFunctionalComponentWithReactForwardRef_1.isFunctionalComponentWithReactForwardRef(node);
}
exports.isDefaultExportedForwardRef = isDefaultExportedForwardRef;
function getComponentDeclaration(sourceFile, functionName) {
    var _a, _b;
    const variable = getVariableStatement_1.getVariableStatement(sourceFile, functionName);
    // const Component = forwardRef(() => {});
    // const Component = forwardRef(function() {});
    // const Component = forwardRef(_Component);
    if (variable && isFunctionalComponentWithReactForwardRef_1.isFunctionalComponentWithReactForwardRef(variable)) {
        const argument = variable.declarationList.declarations[0].initializer.arguments[0];
        // const Component = forwardRef(_Component);
        if (ts.isIdentifier(argument)) {
            const internalVariable = getVariableStatement_1.getVariableStatement(sourceFile, argument.escapedText);
            const initializer = (_b = (_a = internalVariable === null || internalVariable === void 0 ? void 0 : internalVariable.declarationList) === null || _a === void 0 ? void 0 : _a.declarations[0]) === null || _b === void 0 ? void 0 : _b.initializer;
            if (initializer && ts.isArrowFunction(initializer) || ts.isFunctionExpression(initializer)) {
                return { declaration: variable.declarationList.declarations[0], isExported: isExported_1.isExported(variable) };
            }
        }
        if (ts.isArrowFunction(argument) || ts.isFunctionExpression(argument)) {
            return { declaration: argument, isExported: isExported_1.isExported(variable) };
        }
    }
    // export default forwardRef(function() {});
    // export default forwardRef(() => {});
    let result;
    ts.forEachChild(sourceFile, (node) => {
        if (isDefaultExportedForwardRef(node)) {
            const argument = node.expression.arguments[0];
            if (ts.isArrowFunction(argument) || ts.isFunctionExpression(argument)) {
                result = argument;
            }
        }
    });
    return { declaration: result, isExported: true };
}
function findExportedFunctionWithReactForwardRef(context, functionName) {
    const result = getComponentDeclaration(context.file, functionName);
    if (result && result.isExported) {
        return result.declaration;
    }
    let isFunctionExported = false;
    // non-inline export
    // const Component = forwardRef(() => {});
    // export Component;
    ts.forEachChild(context.file, (node) => {
        if (!isFunctionExported) {
            isFunctionExported = isNodeExported_1.isNodeExported(node, functionName);
        }
    });
    return isFunctionExported ? result === null || result === void 0 ? void 0 : result.declaration : undefined;
}
exports.findExportedFunctionWithReactForwardRef = findExportedFunctionWithReactForwardRef;
//# sourceMappingURL=findExportedFunctionWithReactForwardRef.js.map