"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentWrapper_1 = require("../../../component/wrappers/ComponentWrapper");
const builtInWrapperValidator_1 = require("../builtInWrapperValidator");
describe('isBuiltInWrapperValidator', () => {
    const implInfo = {
        framework: 'reactjs',
        lang: 'typescript',
        path: './somePath/',
    };
    describe('when warned array of valid built in wrappers is provided', () => {
        it('should return this array without any warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: ComponentWrapper_1.BuiltInWrappers.NON_RESIZABLE_WRAPPER,
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(builtInWrapperValidator_1.builtInWrapperValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: ComponentWrapper_1.BuiltInWrappers.NON_RESIZABLE_WRAPPER,
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [],
                },
            ]);
        });
    });
    describe('when warned array of invalid built in wrappers is provided', () => {
        it('should return array with warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: 'SomeFancyName',
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(builtInWrapperValidator_1.builtInWrapperValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: 'SomeFancyName',
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [
                        { message: 'Unknown built in wrapper "SomeFancyName"!' },
                    ],
                },
            ]);
        });
    });
    describe('when warned array with custom wrapper is provided', () => {
        it('should return array without warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: 'CustomWrapperName',
                        path: '../path',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(builtInWrapperValidator_1.builtInWrapperValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: 'CustomWrapperName',
                        path: '../path',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ]);
        });
    });
    describe('when warned array with custom wrapper with name reserved for built in wrapper is provided', () => {
        it('should return array without warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: 'NonResizableWrapper',
                        path: '../path',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(builtInWrapperValidator_1.builtInWrapperValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: 'NonResizableWrapper',
                        path: '../path',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [
                        { message: '"NonResizableWrapper" is a reserved name for built in validators!' },
                    ],
                },
            ]);
        });
    });
});
//# sourceMappingURL=builtInWrapperValidator.test.js.map