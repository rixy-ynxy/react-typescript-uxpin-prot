"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ComponentWrapper_1 = require("../../../component/wrappers/ComponentWrapper");
const customWrapperPathValidator_1 = require("../customWrapperPathValidator");
describe('customWrapperPathValidator', () => {
    const implInfo = {
        framework: 'reactjs',
        lang: 'typescript',
        path: path_1.resolve(__dirname, '../../../../../../', 'test/resources/designSystems/withWrappers/Button.js'),
    };
    describe('when custom wrapper with valid path is provided', () => {
        it('should return warned object without warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: 'CustomWrapper',
                        path: './CustomWrapperPlaceholder.ts',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(customWrapperPathValidator_1.customWrapperPathValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: 'CustomWrapper',
                        path: './CustomWrapperPlaceholder.ts',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ]);
        });
    });
    describe('when custom wrapper with invalid path is provided', () => {
        it('should return warned object with warning', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: 'CustomWrapper',
                        path: './NonExistingPath.ts',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(customWrapperPathValidator_1.customWrapperPathValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: 'CustomWrapper',
                        path: './NonExistingPath.ts',
                        type: ComponentWrapper_1.ComponentWrapperType.CUSTOM,
                    },
                    warnings: [
                        { message: 'Invalid wrapper path "./NonExistingPath.ts"!' },
                    ],
                },
            ]);
        });
    });
    describe('when built in wrapper is provided', () => {
        it('should return object withour warnings', () => {
            // having
            const wrappers = [
                {
                    result: {
                        name: ComponentWrapper_1.BuiltInWrappers.NON_RESIZABLE_WRAPPER,
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [],
                },
            ];
            // when
            // then
            expect(customWrapperPathValidator_1.customWrapperPathValidator(wrappers, implInfo)).toEqual([
                {
                    result: {
                        name: ComponentWrapper_1.BuiltInWrappers.NON_RESIZABLE_WRAPPER,
                        type: ComponentWrapper_1.ComponentWrapperType.BUILT_IN,
                    },
                    warnings: [],
                },
            ]);
        });
    });
});
//# sourceMappingURL=customWrapperPathValidator.test.js.map