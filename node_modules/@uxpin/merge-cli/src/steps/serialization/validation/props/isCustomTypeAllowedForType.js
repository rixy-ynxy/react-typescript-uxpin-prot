"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCustomTypeAllowedForType = void 0;
const lodash_1 = require("lodash");
const ComponentPropertyDefinition_1 = require("../../component/implementation/ComponentPropertyDefinition");
const ARRAY_TYPES = ['array', 'typedArray'];
const OBJECT_TYPES = ['custom', 'object', 'shape'];
const ELEMENT_TYPES = ['element', 'node'];
const TEXT_EDITABLE_TYPES = [
    ...ARRAY_TYPES,
    ...ELEMENT_TYPES,
    ...OBJECT_TYPES,
    'string',
];
const CUSTOM_TYPE_ALLOWANCE_MAP = {
    [ComponentPropertyDefinition_1.CustomControlTypeName.CodeEditor]: [
        ...ARRAY_TYPES,
        ...ELEMENT_TYPES,
        ...OBJECT_TYPES,
        'any',
        'func',
        'string',
    ],
    [ComponentPropertyDefinition_1.CustomControlTypeName.Input]: TEXT_EDITABLE_TYPES,
    [ComponentPropertyDefinition_1.CustomControlTypeName.Interactions]: ['func'],
    [ComponentPropertyDefinition_1.CustomControlTypeName.Number]: ['number'],
    [ComponentPropertyDefinition_1.CustomControlTypeName.Switcher]: ['boolean'],
    [ComponentPropertyDefinition_1.CustomControlTypeName.Select]: ['literal'],
    [ComponentPropertyDefinition_1.CustomControlTypeName.Textfield]: TEXT_EDITABLE_TYPES,
};
function isCustomTypeAllowedForType(customType, baseType) {
    const { name: customTypeName } = customType;
    const { name: baseTypeName } = baseType;
    if (baseTypeName === 'union') {
        return isCustomTypeAllowedForUnionType(customType, baseType);
    }
    return isCustomTypeAllowed(customTypeName, baseTypeName);
}
exports.isCustomTypeAllowedForType = isCustomTypeAllowedForType;
function isCustomTypeAllowedForUnionType(customType, baseType) {
    const elementsTypes = baseType.structure.elements.map((type) => type.name);
    const hasSameElementsTypes = !!elementsTypes.length && lodash_1.uniq(elementsTypes).length === 1;
    if (hasSameElementsTypes) {
        return isCustomTypeAllowed(customType.name, elementsTypes[0]);
    }
    return elementsTypes.some((name) => isCustomTypeAllowed(customType.name, name));
}
function isCustomTypeAllowed(customTypeName, baseTypeName) {
    const allowed = CUSTOM_TYPE_ALLOWANCE_MAP[customTypeName];
    return Array.isArray(allowed) && allowed.includes(baseTypeName);
}
//# sourceMappingURL=isCustomTypeAllowedForType.js.map