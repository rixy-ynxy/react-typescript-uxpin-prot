"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDesignSystemMetadata = void 0;
const tslib_1 = require("tslib");
const p_map_1 = require("p-map");
const joinWarningLists_1 = require("../../common/warning/joinWarningLists");
const getBuildOptions_1 = require("../../program/command/push/getBuildOptions");
const getComponentCategoryInfos_1 = require("../discovery/component/category/getComponentCategoryInfos");
const getLibraryName_1 = require("../discovery/library/getLibraryName");
const serializeExamples_1 = require("./component/examples/serializeExamples");
const getComponentMetadata_1 = require("./component/implementation/getComponentMetadata");
const decorateWithPresets_1 = require("./component/presets/decorateWithPresets");
const validateComponentNamespaces_1 = require("./validation/validateComponentNamespaces");
const getVcsDetails_1 = require("./vcs/getVcsDetails");
function getDesignSystemMetadata(programArgs, paths) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const buildOptions = getBuildOptions_1.getBuildOptions(programArgs);
        const libraryName = getLibraryName_1.getLibraryName(paths);
        const categoryInfos = yield getComponentCategoryInfos_1.getComponentCategoryInfos(paths);
        const categories = yield p_map_1.default(categoryInfos, categoryInfoToMetadata);
        const categoriesWithPresets = yield decorateWithPresets_1.decorateWithPresets(categories, programArgs);
        const categorizedComponents = categoriesWithPresets.map((category) => category.result);
        const vcs = yield getVcsDetails_1.getVcsDetails(paths, buildOptions, categorizedComponents);
        validateComponentNamespaces_1.validateComponentNamespaces(categorizedComponents);
        return {
            result: {
                categorizedComponents,
                name: libraryName,
                vcs,
            },
            warnings: joinWarningLists_1.joinWarningLists(categoriesWithPresets.map((category) => category.warnings)),
        };
    });
}
exports.getDesignSystemMetadata = getDesignSystemMetadata;
function categoryInfoToMetadata({ componentInfos, name }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const components = yield p_map_1.default(componentInfos, componentInfoToDefinition);
        return {
            result: {
                components: components.map((component) => component.result),
                name,
            },
            warnings: joinWarningLists_1.joinWarningLists(components.map((component) => component.warnings)),
        };
    });
}
function componentInfoToDefinition(info) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { result: metadata, warnings: metadataWarnings } = yield getComponentMetadata_1.getComponentMetadata(info.implementation);
        const { result: examples, warnings: exampleWarnings } = yield serializeOptionalExamples(info);
        return {
            result: Object.assign(Object.assign({ info }, metadata), { documentation: { examples }, presets: [] }),
            warnings: joinWarningLists_1.joinWarningLists([metadataWarnings, exampleWarnings]),
        };
    });
}
function serializeOptionalExamples(info) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!info.documentation) {
            return { result: [], warnings: [] };
        }
        return yield serializeExamples_1.serializeExamples(info.documentation.path);
    });
}
//# sourceMappingURL=getDesignSystemMetadata.js.map