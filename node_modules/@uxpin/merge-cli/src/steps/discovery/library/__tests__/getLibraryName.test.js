"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const GetLibrariesHandler_1 = require("../../../experimentation/server/handler/libraries/GetLibrariesHandler");
const getLibraryName_1 = require("../getLibraryName");
describe('getLibraryName', () => {
    let paths;
    describe('config with library name', () => {
        beforeEach(() => {
            // having
            paths = {
                configPath: path_1.resolve(__dirname, '../../../../../test/resources/configs/with-name-uxpin.config.js'),
                projectRoot: __dirname,
            };
        });
        it('should retrieve library name from config', () => {
            // when
            const libraryName = getLibraryName_1.getLibraryName(paths);
            // then
            expect(libraryName).toEqual('UXPin Library Name');
        });
    });
    describe('config without library name', () => {
        beforeEach(() => {
            // having
            paths = {
                configPath: path_1.resolve(__dirname, '../../../../../test/resources/configs/without-name-uxpin.config.js'),
                projectRoot: __dirname,
            };
        });
        it('should fallback to default library name if not provided in config', () => {
            // when
            const libraryName = getLibraryName_1.getLibraryName(paths);
            // then
            expect(libraryName).toEqual(GetLibrariesHandler_1.LIBRARY_DEFAULT_NAME);
        });
    });
    describe('without config', () => {
        beforeEach(() => {
            // having
            paths = {
                configPath: path_1.resolve(__dirname, './non-existing-uxpin.config.js'),
                projectRoot: __dirname,
            };
        });
        it('should fallback to default library name if config does not exist', () => {
            // when
            const libraryName = getLibraryName_1.getLibraryName(paths);
            // then
            expect(libraryName).toEqual(GetLibrariesHandler_1.LIBRARY_DEFAULT_NAME);
        });
    });
});
//# sourceMappingURL=getLibraryName.test.js.map