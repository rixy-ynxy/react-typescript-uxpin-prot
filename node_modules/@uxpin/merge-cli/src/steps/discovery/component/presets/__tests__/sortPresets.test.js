"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sortPresets_1 = require("../sortPresets");
describe('sortPresets', () => {
    it('should return sorted paths according to index prefix', () => {
        // having
        const paths = [
            './test/resources/directories/directoryWithPresets/presets/0002-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/10-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/5-basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/2005-advanced.jsx',
            './test/resources/directories/directoryWithPresets/presets/0-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/15-advanced.jsx',
        ];
        const expectedPaths = [
            './test/resources/directories/directoryWithPresets/presets/0-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/0002-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/5-basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/10-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/15-advanced.jsx',
            './test/resources/directories/directoryWithPresets/presets/2005-advanced.jsx',
        ];
        // when
        const result = sortPresets_1.sortPresets(paths);
        // then
        expect(result).toEqual(expectedPaths);
    });
    it('should return paths with no index prefix at the end of the list', () => {
        // having
        const paths = [
            './test/resources/directories/directoryWithPresets/presets/minimal.jsx',
            './test/resources/directories/directoryWithPresets/presets/10-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/advanced.jsx',
            './test/resources/directories/directoryWithPresets/presets/5-basic.jsx',
        ];
        const expectedPaths = [
            './test/resources/directories/directoryWithPresets/presets/5-basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/10-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/minimal.jsx',
            './test/resources/directories/directoryWithPresets/presets/advanced.jsx',
        ];
        // when
        const result = sortPresets_1.sortPresets(paths);
        // then
        expect(result).toEqual(expectedPaths);
    });
    it('should return unsorted paths if index prefix is not present', () => {
        // having
        const paths = [
            './test/resources/directories/directoryWithPresets/presets/default.jsx',
            './test/resources/directories/directoryWithPresets/presets/basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/advanced.jsx',
        ];
        const expectedPaths = [
            './test/resources/directories/directoryWithPresets/presets/default.jsx',
            './test/resources/directories/directoryWithPresets/presets/basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/advanced.jsx',
        ];
        // when
        const result = sortPresets_1.sortPresets(paths);
        // then
        expect(result).toEqual(expectedPaths);
    });
});
//# sourceMappingURL=sortPresets.test.js.map