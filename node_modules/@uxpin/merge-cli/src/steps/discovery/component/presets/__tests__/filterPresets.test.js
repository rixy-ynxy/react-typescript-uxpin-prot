"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const filterPresets_1 = require("../filterPresets");
describe('filterPresets', () => {
    it('should return paths that meet preset filename pattern only', () => {
        // having
        const paths = [
            './test/resources/directories/directoryWithPresets/presets/notPresetDir',
            './test/resources/directories/directoryWithPresets/presets/0-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/1-basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/2-advanced.jsx',
            './test/resources/directories/directoryWithPresets/presets/3-notPreset1.jsx',
            './test/resources/directories/directoryWithPresets/presets/4-notPreset1.json',
            './test/resources/directories/directoryWithPresets/presets/9notPreset2.jsx',
            './test/resources/directories/directoryWithPresets/presets/notPreset2.txt',
        ];
        const expectedPaths = [
            './test/resources/directories/directoryWithPresets/presets/0-default.jsx',
            './test/resources/directories/directoryWithPresets/presets/1-basic.jsx',
            './test/resources/directories/directoryWithPresets/presets/2-advanced.jsx',
            './test/resources/directories/directoryWithPresets/presets/3-notPreset1.jsx',
        ];
        // when
        const result = filterPresets_1.filterPresets(paths);
        // then
        expect(result).toEqual(expectedPaths);
    });
    it('should return empty array if files do not exist', () => {
        // having
        const paths = [
            './test/resources/directories/directoryWithPresets/presets/notExist',
            './test/resources/directories/directoryWithPresets/notExistPresets/notExist',
        ];
        const expectedPaths = [];
        // when
        const result = filterPresets_1.filterPresets(paths);
        // then
        expect(result).toEqual(expectedPaths);
    });
});
//# sourceMappingURL=filterPresets.test.js.map