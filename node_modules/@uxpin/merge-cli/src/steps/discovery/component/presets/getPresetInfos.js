"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPresetInfos = void 0;
const fs_extra_1 = require("fs-extra");
const pReduce = require("p-reduce");
const path_1 = require("path");
const isFile_1 = require("../../../../utils/fs/isFile");
const filterPresets_1 = require("./filterPresets");
const sortPresets_1 = require("./sortPresets");
const PRESETS_DIR = 'presets';
function getPresetInfos(componentPaths) {
    return getFilePaths(path_1.join(componentPaths.projectRoot, componentPaths.componentDirPath, PRESETS_DIR))
        .then((paths) => getRelativePaths(componentPaths.projectRoot, paths))
        .then(filterPresets_1.filterPresets)
        .then(sortPresets_1.sortPresets)
        .then((paths) => paths.map((path) => ({ path })));
}
exports.getPresetInfos = getPresetInfos;
function getFilePaths(dirPath) {
    return fs_extra_1.readdir(dirPath)
        .then((content) => content.map((fileName) => path_1.join(dirPath, fileName)))
        .then(skipDirectories)
        .catch(() => []);
}
function skipDirectories(paths) {
    return pReduce(paths.map(getFilePath), (result, filePath) => {
        if (filePath) {
            result.push(filePath);
        }
        return result;
    }, []);
}
function getFilePath(path) {
    return isFile_1.isFile(path).then((value) => value ? path : null).catch(() => null);
}
function getRelativePaths(fromPath, paths) {
    return paths.map((path) => path_1.relative(fromPath, path));
}
//# sourceMappingURL=getPresetInfos.js.map