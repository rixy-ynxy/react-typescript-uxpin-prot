"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const getDocumentationInfo_1 = require("../getDocumentationInfo");
describe('getDocumentationInfo', () => {
    describe('obtaining info about the documentation of a component in the given directory', () => {
        it('recognizes and returns correct path to a `Readme.md` file', () => {
            const paths = getComponentsPath('directoryWithReadmeMarkdown');
            const expectedInfo = {
                path: `directories/directoryWithReadmeMarkdown/Readme.md`,
            };
            // when
            return getDocumentationInfo_1.getDocumentationInfo(paths)
                // then
                .then((info) => expect(info).toEqual(expectedInfo));
        });
        it('recognizes and returns correct path to a `README.md` file', () => {
            const paths = getComponentsPath('directoryWithCapitalReadmeMarkdown');
            const expectedInfo = {
                path: `directories/directoryWithCapitalReadmeMarkdown/README.md`,
            };
            // when
            return getDocumentationInfo_1.getDocumentationInfo(paths)
                // then
                .then((info) => expect(info).toEqual(expectedInfo));
        });
        it('recognizes and returns correct path to a markdown file with a name equal to a directory name', () => {
            const paths = getComponentsPath('directoryWithMarkdown');
            const expectedInfo = {
                path: `directories/directoryWithMarkdown/directoryWithMarkdown.md`,
            };
            // when
            return getDocumentationInfo_1.getDocumentationInfo(paths)
                // then
                .then((info) => expect(info).toEqual(expectedInfo));
        });
        it('rejects a promise if a directory does not contain a documentation file', (done) => {
            const paths = getComponentsPath('directoryWithoutComponent');
            // when
            return getDocumentationInfo_1.getDocumentationInfo(paths)
                // then
                .catch(() => done());
        });
        it('rejects a promise if a directory does not exist', (done) => {
            const paths = getComponentsPath('iDontExist');
            // when
            getDocumentationInfo_1.getDocumentationInfo(paths)
                // then
                .catch(() => done());
        });
        describe('when the given directory pat is a path to a file', () => {
            it('rejects a promise', (done) => {
                const paths = getComponentsPath('notDirectory.ts');
                // when
                getDocumentationInfo_1.getDocumentationInfo(paths)
                    // then
                    .catch(() => done());
            });
        });
    });
    function getComponentsPath(componentDirName) {
        return {
            componentDirName,
            componentDirPath: `directories/${componentDirName}`,
            projectRoot: path_1.resolve('./test/resources/'),
        };
    }
});
//# sourceMappingURL=getDocumentationInfo.test.js.map