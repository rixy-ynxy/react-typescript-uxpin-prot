"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PresetFileGenerator = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const lodash_1 = require("lodash");
const path_1 = require("path");
const getImplementationInfo_1 = require("../../../steps/discovery/component/implementation/getImplementationInfo");
const getComponentMetadata_1 = require("../../../steps/serialization/component/implementation/getComponentMetadata");
const printLine_1 = require("../../console/printLine");
const PrintOptions_1 = require("../../console/PrintOptions");
const writeToFile_1 = require("../writeToFile");
const generatePropertyValuePair_1 = require("./helpers/generatePropertyValuePair");
const getPropTypeValue_1 = require("./helpers/getPropTypeValue");
const PRESET_FILE_NAME = '0-default.jsx';
function isChildrenProp(property) {
    return property.name === 'children';
}
class PresetFileGenerator {
    constructor(componentPath) {
        this.componentPath = componentPath;
        this.componentDirectory = path_1.dirname(componentPath);
        this.presetDirectory = `${this.componentDirectory}/presets`;
        this.presetFilePath = `${this.presetDirectory}/${PRESET_FILE_NAME}`;
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield fs_extra_1.pathExists(path_1.resolve(__dirname, this.componentPath))) {
                throw new Error(`ðŸ›‘ Component ${this.componentPath} does not exists`);
            }
            const implementationInfo = getImplementationInfo_1.getImplementationInfo(this.componentPath);
            if (!implementationInfo) {
                throw Error(`ðŸ›‘ Invalid component path - ${this.componentPath}`);
            }
            const { result: metadata, warnings: metadataWarnings } = yield getComponentMetadata_1.getComponentMetadata(implementationInfo);
            if (metadataWarnings.length && !metadata.properties.length) {
                throw new Error(metadataWarnings[0].message);
            }
            this.componentMetadata = metadata;
            this.componentName = this.componentMetadata.name;
            this.setPropertiesValues();
        });
    }
    createPresetFile() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!(yield fs_extra_1.pathExists(this.presetDirectory))) {
                yield fs_extra_1.mkdir(this.presetDirectory);
            }
            if (yield fs_extra_1.pathExists(this.presetFilePath)) {
                printLine_1.printWarning(`ðŸ‘‰ File ${this.presetFilePath} exists`);
                return;
            }
            const componentFileContent = yield this.generateComponentFile();
            yield writeToFile_1.writeToFile(this.presetFilePath, componentFileContent);
            printLine_1.printLine(`âœ… File ${this.presetFilePath} created successfully`, { color: PrintOptions_1.PrintColor.GREEN });
        });
    }
    generateComponentFile() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return [
                yield this.generateImports(),
                '',
                'export default (',
                `${generatePropertyValuePair_1.INDENTATION_CHAR}<${this.componentName}`,
                `${this.generatePropertiesList()}`,
                `${this.generateComponentEnd()}`,
                ');',
            ].join('\n');
        });
    }
    setPropertiesValues() {
        this.componentProperties = this.componentMetadata.properties.reduce((result, prop) => {
            result.push({
                name: prop.name,
                value: (prop.defaultValue && prop.defaultValue.value) || getPropTypeValue_1.getPropTypeValue(prop.type),
            });
            return result;
        }, [{
                name: 'uxpId',
                value: `${lodash_1.kebabCase(this.componentName)}-1`,
            }]);
    }
    generateComponentEnd() {
        if (this.hasChildren()) {
            return `${generatePropertyValuePair_1.INDENTATION_CHAR}>Put ${this.componentName} contents here</${this.componentName}>`;
        }
        return `${generatePropertyValuePair_1.INDENTATION_CHAR}/>`;
    }
    hasChildren() {
        return !!this.componentProperties.find(isChildrenProp);
    }
    hasDefaultExport() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = yield fs_extra_1.readFile(this.componentPath, 'utf8');
                return file.indexOf('export default') !== -1 || /export (.*) as default/.test(file);
            }
            catch (e) {
                return false;
            }
        });
    }
    generateImports() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const relativeComponentPath = path_1.relative(this.presetDirectory, this.componentPath)
                .split('.')
                .slice(0, -1)
                .join('.');
            const importName = (yield this.hasDefaultExport()) ? this.componentName : `{ ${this.componentName} }`;
            const imports = [
                `import React from 'react';`,
                `import ${importName} from '${relativeComponentPath}';`,
            ];
            return imports.join('\n');
        });
    }
    generatePropertiesList() {
        return this.componentProperties.reduce((result, property) => {
            if (!isChildrenProp(property)) {
                result.push(generatePropertyValuePair_1.generatePropertyValuePair(property.name, property.value));
            }
            return result;
        }, []).join('\n');
    }
}
exports.PresetFileGenerator = PresetFileGenerator;
//# sourceMappingURL=PresetFileGenerator.js.map