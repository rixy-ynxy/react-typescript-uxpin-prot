"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateRepositoryPointerToBranch = void 0;
const tslib_1 = require("tslib");
const isTestEnv_1 = require("../../../program/env/isTestEnv");
const requestPromiseWithEnhancedError_1 = require("../../../utils/requestPromiseWithEnhancedError");
const getAuthHeaders_1 = require("./headers/getAuthHeaders");
const getUserAgentHeaders_1 = require("./headers/getUserAgentHeaders");
const encodeBranchName_1 = require("./params/encodeBranchName");
function updateRepositoryPointerToBranch(opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Skip updating repository pointers in test environment
        if (isTestEnv_1.isTestEnv()) {
            return Promise.resolve();
        }
        const branchName = encodeBranchName_1.encodeBranchName(opts.branch);
        return requestPromiseWithEnhancedError_1.requestPromiseWithEnhancedError(`${opts.apiDomain}/code/v/1.0/update-repository-pointer`, {
            body: {
                commitHash: opts.commitHash,
                pointerName: branchName,
                pointerType: "branch" /* Branch */,
            },
            headers: Object.assign(Object.assign({}, getAuthHeaders_1.getAuthHeaders(opts.authToken)), getUserAgentHeaders_1.getUserAgentHeaders()),
            json: true,
            method: 'POST',
        })
            .then(() => undefined);
    });
}
exports.updateRepositoryPointerToBranch = updateRepositoryPointerToBranch;
//# sourceMappingURL=updateRepositoryPointerToBranch.js.map