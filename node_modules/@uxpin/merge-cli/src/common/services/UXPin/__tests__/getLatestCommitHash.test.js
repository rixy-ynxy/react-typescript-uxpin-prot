"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const requestPromise = require("request-promise");
const getLatestCommitHash_1 = require("../getLatestCommitHash");
jest.mock('request-promise');
const requestPromiseMock = requestPromise;
describe('getLatestCommitHash', () => {
    const domain = 'https://uxpin.mock';
    const branch = 'master';
    const token = 'token';
    beforeEach(() => {
        requestPromiseMock.mockRestore();
    });
    describe('request on master branch', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // given
            requestPromiseMock.mockImplementation(() => Promise.resolve({ commitHash: 'abc123' }));
            // when
            yield getLatestCommitHash_1.getLatestCommitHash(domain, branch, token);
        }));
        it('should call proper url', () => {
            const [url] = requestPromiseMock.mock.calls[0];
            expect(url).toEqual('https://uxpin.mock/code/v/1.0/branch/master/latestCommit');
        });
        it('should use proper HTTP method', () => {
            const [, options] = requestPromiseMock.mock.calls[0];
            expect(options.method).toEqual('GET');
        });
        it('should use proper auth-token', () => {
            const [, options] = requestPromiseMock.mock.calls[0];
            expect(options.headers['auth-token']).toEqual('token');
        });
        it('should have User-Agent header', () => {
            const [, options] = requestPromiseMock.mock.calls[0];
            expect(options.headers['User-Agent']).toContain('uxpin-merge-cli');
        });
    });
    describe('request on a branch with name containing a slash character', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // given
            const branchName = 'pull/27';
            requestPromiseMock.mockImplementation(() => Promise.resolve({ commitHash: 'abc123' }));
            // when
            yield getLatestCommitHash_1.getLatestCommitHash(domain, branchName, token);
        }));
        it('should call proper url', () => {
            const [url] = requestPromiseMock.mock.calls[0];
            expect(url).toEqual('https://uxpin.mock/code/v/1.0/branch/pull:2F27/latestCommit');
        });
    });
    describe('HTTP 200', () => {
        it('should return commitHash', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // given
            requestPromiseMock.mockImplementation(() => Promise.resolve({ commitHash: 'abc123' }));
            // when
            const commitHash = yield getLatestCommitHash_1.getLatestCommitHash(domain, branch, token);
            // then
            expect(commitHash).toEqual('abc123');
        }));
        it('should return null if commitHash is not available', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // given
            requestPromiseMock.mockImplementation(() => Promise.resolve(undefined));
            // when
            const commitHash = yield getLatestCommitHash_1.getLatestCommitHash(domain, branch, token);
            // then
            expect(commitHash).toEqual(null);
        }));
    });
    describe('HTTP 401', () => {
        beforeEach(() => {
            requestPromiseMock.mockImplementation(() => {
                return Promise.reject({
                    error: {
                        error: 'Unauthorized',
                        message: 'Incorrect authorization token',
                        statusCode: 401,
                    },
                });
            });
        });
        it('should reject on error', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            try {
                yield getLatestCommitHash_1.getLatestCommitHash(domain, branch, token);
            }
            catch (error) {
                expect(error).toEqual({
                    error: 'Unauthorized',
                    message: 'Incorrect authorization token',
                    statusCode: 401,
                    url: 'https://uxpin.mock/code/v/1.0/branch/master/latestCommit',
                });
            }
        }));
    });
});
//# sourceMappingURL=getLatestCommitHash.test.js.map