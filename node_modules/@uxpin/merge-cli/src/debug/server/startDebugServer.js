"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startDebugServer = void 0;
const safe = require("colors/safe");
const fs_extra_1 = require("fs-extra");
const http_1 = require("http");
const getConfig_1 = require("../../steps/building/config/getConfig");
const copyRequiredFiles_1 = require("./copyRequiredFiles");
const serverConfig_1 = require("./serverConfig");
const writeStaticIndexFile_1 = require("./writeStaticIndexFile");
const HTTP_STATUS_OK = 200;
const HTTP_STATUS_NOT_FOUND = 404;
function startDebugServer(components, serverOptions) {
    const { port, root } = serverOptions;
    return copyRequiredFiles_1.copyRequiredFiles(root)
        .then((bundlePath) => writeStaticIndexFile_1.writeStaticIndexFile(root, bundlePath, components))
        .then(() => {
        const server = http_1.createServer((req, res) => {
            const path = (req.url === '/' || req.url === undefined) ? '/index.html' : req.url;
            fs_extra_1.readFile(getConfig_1.TEMP_DIR_PATH + path, (err, data) => {
                if (err) {
                    res.writeHead(HTTP_STATUS_NOT_FOUND);
                    console.log(getLogString(req, res));
                    res.end(JSON.stringify(err));
                    return;
                }
                res.writeHead(HTTP_STATUS_OK, { 'Cache-Control': 'no-cache' });
                console.log(getLogString(req, res));
                res.end(data);
            });
        });
        server.listen(port, () => console.log(`server ready on ${serverConfig_1.SERVER_URL}:${port}/`));
    })
        .then(() => console.log(serverConfig_1.SERVER_SUCCESS_MESSAGE));
}
exports.startDebugServer = startDebugServer;
function getLogString(req, res) {
    const reqString = `${req.method} ${req.url} ${res.statusCode}`;
    if (res.statusCode === HTTP_STATUS_NOT_FOUND) {
        return safe.red(`${reqString} NOT FOUND`);
    }
    return safe.green(reqString);
}
//# sourceMappingURL=startDebugServer.js.map