"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_docgen_1 = require("react-docgen");
const isPropTypesExpression_1 = require("./isPropTypesExpression");
const NodePathTypes_1 = require("./Nodes/NodePathTypes");
const parsePath_1 = require("./parsePath");
const resolvePropTypesExpression_1 = require("./resolvePropTypesExpression");
function resolveToValue(path, context) {
    const { node } = path;
    switch (node.type) {
        case NodePathTypes_1.NodePathType.ASSIGNMENT_EXPRESSION: {
            if (!node.operator || node.operator !== parsePath_1.NodeOperator.EQUALITY) {
                break;
            }
            return resolveToValue(path.get('right'), context);
        }
        case NodePathTypes_1.NodePathType.CALL_EXPRESSION: {
            if (isPropTypesExpression_1.isPropTypesExpression(path)) {
                return resolvePropTypesExpression_1.resolvePropTypesExpression(path, context);
            }
            break;
        }
        case NodePathTypes_1.NodePathType.IDENTIFIER: {
            break;
        }
        case NodePathTypes_1.NodePathType.MEMBER_EXPERSSION: {
            if (isPropTypesExpression_1.isPropTypesExpression(path)) {
                return resolvePropTypesExpression_1.resolvePropTypesExpression(path, context);
            }
            const root = react_docgen_1.utils.getMemberExpressionRoot(path);
            if (!root) {
                return path;
            }
            const resolved = resolveToValue(root, context);
            if (resolved.node.type !== NodePathTypes_1.NodePathType.OBJECT_EXPRESSION) {
                break;
            }
            return resolved;
        }
        case NodePathTypes_1.NodePathType.TYPE_CAST_EXPRESSION: {
            return resolveToValue(path.get('expression'), context);
        }
        case NodePathTypes_1.NodePathType.VARIABLE_DECLARATOR: {
            if (node.init) {
                return resolveToValue(path.get('init'), context);
            }
        }
        default: {
            return path;
        }
    }
    return path;
}
exports.resolveToValue = resolveToValue;
//# sourceMappingURL=resolveToValue.js.map